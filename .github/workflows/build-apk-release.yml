name: Build APK and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'beta'
        type: choice
        options:
        - beta
        - stable
      flavor:
        description: 'Build flavor'
        required: true
        default: 'foss'
        type: choice
        options:
        - core
        - foss
        - gplay

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          cache-read-only: false

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Extract version info
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_tag=true" >> $GITHUB_OUTPUT
          else
            VERSION="v$(date +'%Y%m%d')-$(git rev-parse --short HEAD)"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_tag=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine build flavor
        id: flavor
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "flavor=${{ github.event.inputs.flavor }}" >> $GITHUB_OUTPUT
          else
            echo "flavor=foss" >> $GITHUB_OUTPUT
          fi

      - name: Build APK (Debug)
        run: |
          ./gradlew assemble${{ steps.flavor.outputs.flavor }}Debug

      - name: Build APK (Release - unsigned)
        run: |
          ./gradlew assemble${{ steps.flavor.outputs.flavor }}Release

      - name: Rename APK files
        run: |
          mkdir -p dist
          find app/build/outputs/apk -name "*.apk" -type f | while read apk; do
            filename=$(basename "$apk")
            flavor_dir=$(dirname "$apk" | xargs basename)
            build_type=$(dirname "$(dirname "$apk")" | xargs basename)
            
            # Create descriptive filename
            new_name="kalendar-${{ steps.version.outputs.version }}-${flavor_dir}-${build_type}.apk"
            cp "$apk" "dist/$new_name"
            echo "Copied: $apk -> dist/$new_name"
          done

      - name: List built APKs
        run: |
          echo "Built APK files:"
          ls -la dist/

      - name: Create Release Notes
        id: release_notes
        run: |
          RELEASE_TYPE="${{ github.event.inputs.release_type || 'beta' }}"
          FLAVOR="${{ steps.flavor.outputs.flavor }}"
          VERSION="${{ steps.version.outputs.version }}"
          
          cat > release_notes.md << EOF
          ## Kalendar ${VERSION}
          
          ### 构建信息
          - **版本**: ${VERSION}
          - **构建类型**: ${RELEASE_TYPE}
          - **构建变体**: ${FLAVOR}
          - **构建时间**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **提交**: ${GITHUB_SHA:0:7}
          
          ### APK 文件说明
          - **Debug版本**: 用于开发和测试，包含调试信息
          - **Release版本**: 生产版本，已优化但未签名
          
          ### 安装说明
          1. 下载对应的 APK 文件
          2. 在 Android 设备上启用"未知来源"应用安装
          3. 安装 APK 文件
          
          > **注意**: Release 版本的 APK 未签名，可能需要在安装时确认安全警告
          
          ### 更新日志
          请参考 [CHANGELOG.md](https://github.com/${GITHUB_REPOSITORY}/blob/main/CHANGELOG.md) 获取详细更新信息。
          EOF
          
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Kalendar ${{ steps.version.outputs.version }}
          body_path: ${{ steps.release_notes.outputs.release_notes_file }}
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'beta' || steps.version.outputs.is_tag == 'false' }}
          files: |
            dist/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APKs as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apk-files-${{ steps.version.outputs.version }}
          path: dist/*.apk
          retention-days: 90

      - name: Summary
        run: |
          echo "## 🎉 构建完成!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 构建信息" >> $GITHUB_STEP_SUMMARY
          echo "- **版本**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **构建变体**: ${{ steps.flavor.outputs.flavor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **发布类型**: ${{ github.event.inputs.release_type || 'beta' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 生成的 APK 文件" >> $GITHUB_STEP_SUMMARY
          ls -la dist/ | grep .apk | awk '{print "- " $9 " (" $5 " bytes)"}' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 发布链接" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${GITHUB_REPOSITORY}/releases/tag/${{ steps.version.outputs.version }})" >> $GITHUB_STEP_SUMMARY