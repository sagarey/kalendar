name: Build APK and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'beta'
        type: choice
        options:
        - beta
        - stable

# ‰ºòÂåñÂπ∂ÂèëÊéßÂà∂ÔºåÈÅøÂÖçÈáçÂ§çËøêË°å
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-release:
    runs-on: ubuntu-latest-4-cores
    timeout-minutes: 40  # 4Ê†∏ÂøÉ‰ºòÂåñÂêéÔºåÁº©Áü≠Ë∂ÖÊó∂Êó∂Èó¥
    permissions:
      contents: write
      actions: read
    env:
      # ‰ºòÂåñ Gradle ÊÄßËÉΩ - 4Ê†∏ÂøÉÈ´òÊÄßËÉΩÈÖçÁΩÆ
      GRADLE_OPTS: -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=6 -Dorg.gradle.configureondemand=true -Dorg.gradle.caching=true -Dkotlin.incremental=true -Dkotlin.incremental.android=true -Dkotlin.compiler.execution.strategy=in-process -Dorg.gradle.jvmargs="-Xmx6g -XX:+UseG1GC -XX:MaxGCPauseMillis=30 -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -XX:+UseFastUnorderedTimeStamps -XX:G1HeapRegionSize=16m"
      # Android Áõ∏ÂÖ≥ÁéØÂ¢ÉÂèòÈáè - ÊúÄÊñ∞ÈÖçÁΩÆ
      ANDROID_COMPILE_SDK: 34
      ANDROID_BUILD_TOOLS: 34.0.0
      ANDROID_SDK_TOOLS: 9477386
      API_LEVEL: 34
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          cache-read-only: false

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Pre-download dependencies
        timeout-minutes: 10  # ‰æùËµñ‰∏ãËΩΩË∂ÖÊó∂ÊéßÂà∂
        run: |
          echo "üì• ‰∏ãËΩΩ‰æùËµñ..."
          ./gradlew dependencies --no-daemon --stacktrace --parallel --max-workers=6
          echo "‚úÖ ‰æùËµñ‰∏ãËΩΩÂÆåÊàê"

      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/lib/android/sdk
            ~/.android
          key: ${{ runner.os }}-android-sdk-${{ env.API_LEVEL }}
          restore-keys: |
            ${{ runner.os }}-android-sdk-

      - name: Cache build outputs
        uses: actions/cache@v4
        with:
          path: |
            app/build/intermediates
            app/build/tmp
            app/build/generated
            build/kotlin
            .gradle/kotlin-dsl
          key: ${{ runner.os }}-build-release-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/*.kt', '**/*.java') }}
          restore-keys: |
            ${{ runner.os }}-build-release-
            ${{ runner.os }}-build-

      - name: Extract version info
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_tag=true" >> $GITHUB_OUTPUT
          else
            VERSION="v$(date +'%Y%m%d')-$(git rev-parse --short HEAD)"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_tag=false" >> $GITHUB_OUTPUT
          fi

      - name: Build APK (Debug)
        timeout-minutes: 15  # 4Ê†∏ÂøÉÊûÑÂª∫Â∫îËØ•Êõ¥Âø´
        run: |
          echo "üî® ÊûÑÂª∫ APK..."
          echo "üíæ ÂèØÁî®ÂÜÖÂ≠ò: $(free -h | grep '^Mem:' | awk '{print $7}')"
          echo "üèóÔ∏è CPU Ê†∏ÂøÉÊï∞: $(nproc)"
          BUILD_START_TIME=$(date +%s)
          
          # ÂêØÁî®Êõ¥ËØ¶ÁªÜÁöÑÊûÑÂª∫‰ø°ÊÅØ
          if ./gradlew assembleFossDebug --configure-on-demand --stacktrace --build-cache --parallel --max-workers=6 --info; then
            BUILD_END_TIME=$(date +%s)
            BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
            echo "‚úÖ ÊûÑÂª∫ÊàêÂäü (${BUILD_DURATION}s)"
            
            # ÊòæÁ§∫ÊûÑÂª∫‰∫ßÁâ©ÂíåËØ¶ÁªÜ‰ø°ÊÅØ
            if [ -d "app/build/outputs" ]; then
              find app/build/outputs -name "*.apk" | while read output; do
                size=$(du -h "$output" | cut -f1)
                echo "üì± $(basename "$output"): $size"
              done
            fi
            
            # ÊòæÁ§∫GradleÊÄßËÉΩÁªüËÆ°
            echo "üìä ÊûÑÂª∫ÊÄßËÉΩÁªüËÆ°:"
            echo "- ÊûÑÂª∫Êó∂Èó¥: ${BUILD_DURATION}s"
            echo "- ÊúÄÂ§ßÂÜÖÂ≠ò‰ΩøÁî®: $(cat /proc/meminfo | grep MemAvailable | awk '{print $2}') KB"
          else
            echo "‚ùå ÊûÑÂª∫Â§±Ë¥•"
            exit 1
          fi

      - name: Rename APK files
        run: |
          mkdir -p dist
          
          # Ê£ÄÊü•ÊûÑÂª∫ËæìÂá∫
          if [ ! -d "app/build/outputs/apk" ]; then
            echo "‚ùå APK ËæìÂá∫ÁõÆÂΩï‰∏çÂ≠òÂú®"
            exit 1
          fi
          
          # ÈáçÂëΩÂêç APK Êñá‰ª∂
          find app/build/outputs/apk -name "*.apk" -type f | while read apk; do
            if [ -f "$apk" ]; then
              filename=$(basename "$apk")
              flavor_dir=$(dirname "$apk" | xargs basename)
              build_type=$(dirname "$(dirname "$apk")" | xargs basename)
              
              # Create descriptive filename
              new_name="kalendar-${{ steps.version.outputs.version }}-${flavor_dir}-${build_type}.apk"
              cp "$apk" "dist/$new_name"
              echo "‚úÖ Â§çÂà∂: $apk -> dist/$new_name"
              
              # ÊòæÁ§∫Êñá‰ª∂Â§ßÂ∞è
              size=$(du -h "dist/$new_name" | cut -f1)
              echo "üì¶ Êñá‰ª∂Â§ßÂ∞è: $size"
            fi
          done
          
          # È™åËØÅËæìÂá∫Êñá‰ª∂
          if [ -z "$(ls -A dist/)" ]; then
            echo "‚ùå Ê≤°ÊúâÁîüÊàê APK Êñá‰ª∂"
            exit 1
          fi

      - name: List built APKs
        run: |
          echo "üì¶ ÁîüÊàêÁöÑÊñá‰ª∂:"
          for apk in dist/*.apk; do
            if [ -f "$apk" ]; then
              echo "  üì± $(basename "$apk"): $(du -h "$apk" | cut -f1)"
            fi
          done

      - name: Check if release exists
        id: check_release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if gh release view "$VERSION" --repo ${{ github.repository }} >/dev/null 2>&1; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
            echo "Release $VERSION already exists, will only upload APK files"
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
            echo "Release $VERSION does not exist, will create new release"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release Notes (for new releases only)
        if: steps.check_release.outputs.release_exists == 'false'
        id: release_notes
        run: |
          RELEASE_TYPE="${{ github.event.inputs.release_type || 'beta' }}"
          FLAVOR="foss"
          VERSION="${{ steps.version.outputs.version }}"
          
          cat > release_notes.md << EOF
          ## Kalendar ${VERSION}
          
          ### ÊûÑÂª∫‰ø°ÊÅØ
          - **ÁâàÊú¨**: ${VERSION}
          - **ÊûÑÂª∫Á±ªÂûã**: ${RELEASE_TYPE}
          - **ÊûÑÂª∫Âèò‰Ωì**: ${FLAVOR}
          - **ÊûÑÂª∫Êó∂Èó¥**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Êèê‰∫§**: ${GITHUB_SHA:0:7}
          
          ### APK Êñá‰ª∂ËØ¥Êòé
          - **DebugÁâàÊú¨**: Áî®‰∫éÂºÄÂèëÂíåÊµãËØïÔºåÂåÖÂê´Ë∞ÉËØï‰ø°ÊÅØÔºå‰ΩøÁî®Ë∞ÉËØïÁ≠æÂêç
          
          ### ÂÆâË£ÖËØ¥Êòé
          1. ‰∏ãËΩΩÂØπÂ∫îÁöÑ APK Êñá‰ª∂
          2. Âú® Android ËÆæÂ§á‰∏äÂêØÁî®"Êú™Áü•Êù•Ê∫ê"Â∫îÁî®ÂÆâË£Ö
          3. ÂÆâË£Ö APK Êñá‰ª∂
          
          > **Ê≥®ÊÑè**: APK ‰ΩøÁî®Ë∞ÉËØïÁ≠æÂêçÔºåÂÆâË£ÖÊó∂ÈúÄË¶ÅÂêØÁî®"Êú™Áü•Êù•Ê∫ê"
          
          ### Êõ¥Êñ∞Êó•Âøó
          ËØ∑ÂèÇËÄÉ [CHANGELOG.md](https://github.com/${GITHUB_REPOSITORY}/blob/main/CHANGELOG.md) Ëé∑ÂèñËØ¶ÁªÜÊõ¥Êñ∞‰ø°ÊÅØ„ÄÇ
          EOF
          
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create GitHub Release (new releases only)
        if: steps.check_release.outputs.release_exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Kalendar ${{ steps.version.outputs.version }}
          body_path: ${{ steps.release_notes.outputs.release_notes_file }}
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'beta' || steps.version.outputs.is_tag == 'false' }}
          files: |
            dist/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APK to existing release
        if: steps.check_release.outputs.release_exists == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "üì§ ‰∏ä‰º†Âà∞ Release $VERSION"
          
          for apk in dist/*.apk; do
            if [ -f "$apk" ]; then
              filename=$(basename "$apk")
              if gh release upload "$VERSION" "$apk" --repo ${{ github.repository }} --clobber; then
                echo "‚úÖ $filename"
              else
                echo "‚ùå $filename ‰∏ä‰º†Â§±Ë¥•"
                exit 1
              fi
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APKs and Build Reports
        uses: actions/upload-artifact@v4
        with:
          name: apk-files-foss-${{ steps.version.outputs.version }}
          path: |
            dist/*.apk
            build/reports/**/*
            app/build/reports/**/*
            gradle-build-scan-*.txt
          retention-days: 90

      - name: Summary
        run: |
          echo "## üéâ ÊûÑÂª∫ÂÆåÊàê" >> $GITHUB_STEP_SUMMARY
          echo "- **ÁâàÊú¨**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Êèê‰∫§**: ${GITHUB_SHA:0:7}" >> $GITHUB_STEP_SUMMARY
          echo "- **Á±ªÂûã**: ${{ github.event.inputs.release_type || 'beta' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üì± ÁîüÊàêÁöÑ APK" >> $GITHUB_STEP_SUMMARY
          for apk in dist/*.apk; do
            if [ -f "$apk" ]; then
              filename=$(basename "$apk")
              size=$(du -h "$apk" | cut -f1)
              echo "- **${filename}** (${size})" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó ÈìæÊé•" >> $GITHUB_STEP_SUMMARY
          echo "- [üìã Release](https://github.com/${GITHUB_REPOSITORY}/releases/tag/${{ steps.version.outputs.version }})" >> $GITHUB_STEP_SUMMARY