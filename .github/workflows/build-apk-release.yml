name: Build APK and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'beta'
        type: choice
        options:
        - beta
        - stable

# 优化并发控制，避免重复运行
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-release:
    runs-on: ubuntu-latest-4-cores
    timeout-minutes: 45
    permissions:
      contents: write
      actions: read
    env:
      # 优化 Gradle 性能
      GRADLE_OPTS: -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.configureondemand=true -Dorg.gradle.jvmargs="-Xmx4g -XX:+UseG1GC"
      # Android 相关环境变量
      ANDROID_COMPILE_SDK: 34
      ANDROID_BUILD_TOOLS: 34.0.0
      ANDROID_SDK_TOOLS: 9477386
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          cache-read-only: false

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Pre-download dependencies
        run: |
          ./gradlew dependencies --no-daemon --stacktrace

      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/lib/android/sdk
            ~/.android
          key: ${{ runner.os }}-android-sdk-34
          restore-keys: |
            ${{ runner.os }}-android-sdk-

      - name: Cache build outputs
        uses: actions/cache@v4
        with:
          path: |
            app/build/intermediates
            app/build/tmp
          key: ${{ runner.os }}-build-release-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-release-

      - name: Extract version info
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_tag=true" >> $GITHUB_OUTPUT
          else
            VERSION="v$(date +'%Y%m%d')-$(git rev-parse --short HEAD)"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_tag=false" >> $GITHUB_OUTPUT
          fi

      - name: Build APK (Debug)
        run: |
          # 构建 APK（带重试机制和性能优化）
          for i in {1..3}; do
            if ./gradlew assembleFossDebug --parallel --configure-on-demand --stacktrace --build-cache; then
              echo "✅ 构建成功"
              break
            else
              echo "❌ 构建失败，重试 $i/3"
              if [ $i -eq 3 ]; then exit 1; fi
              ./gradlew clean
              sleep 15
            fi
          done

      - name: Rename APK files
        run: |
          mkdir -p dist
          
          # 检查构建输出
          if [ ! -d "app/build/outputs/apk" ]; then
            echo "❌ APK 输出目录不存在"
            exit 1
          fi
          
          # 重命名 APK 文件
          find app/build/outputs/apk -name "*.apk" -type f | while read apk; do
            if [ -f "$apk" ]; then
              filename=$(basename "$apk")
              flavor_dir=$(dirname "$apk" | xargs basename)
              build_type=$(dirname "$(dirname "$apk")" | xargs basename)
              
              # Create descriptive filename
              new_name="kalendar-${{ steps.version.outputs.version }}-${flavor_dir}-${build_type}.apk"
              cp "$apk" "dist/$new_name"
              echo "✅ 复制: $apk -> dist/$new_name"
              
              # 显示文件大小
              size=$(du -h "dist/$new_name" | cut -f1)
              echo "📦 文件大小: $size"
            fi
          done
          
          # 验证输出文件
          if [ -z "$(ls -A dist/)" ]; then
            echo "❌ 没有生成 APK 文件"
            exit 1
          fi

      - name: List built APKs
        run: |
          echo "🔍 构建的 APK 文件:"
          ls -la dist/
          echo ""
          echo "📊 文件详情:"
          for apk in dist/*.apk; do
            if [ -f "$apk" ]; then
              echo "  📱 $(basename "$apk"): $(du -h "$apk" | cut -f1)"
            fi
          done

      - name: Check if release exists
        id: check_release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if gh release view "$VERSION" --repo ${{ github.repository }} >/dev/null 2>&1; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
            echo "Release $VERSION already exists, will only upload APK files"
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
            echo "Release $VERSION does not exist, will create new release"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release Notes (for new releases only)
        if: steps.check_release.outputs.release_exists == 'false'
        id: release_notes
        run: |
          RELEASE_TYPE="${{ github.event.inputs.release_type || 'beta' }}"
          FLAVOR="foss"
          VERSION="${{ steps.version.outputs.version }}"
          
          cat > release_notes.md << EOF
          ## Kalendar ${VERSION}
          
          ### 构建信息
          - **版本**: ${VERSION}
          - **构建类型**: ${RELEASE_TYPE}
          - **构建变体**: ${FLAVOR}
          - **构建时间**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **提交**: ${GITHUB_SHA:0:7}
          
          ### APK 文件说明
          - **Debug版本**: 用于开发和测试，包含调试信息，使用调试签名
          
          ### 安装说明
          1. 下载对应的 APK 文件
          2. 在 Android 设备上启用"未知来源"应用安装
          3. 安装 APK 文件
          
          > **注意**: APK 使用调试签名，安装时需要启用"未知来源"
          
          ### 更新日志
          请参考 [CHANGELOG.md](https://github.com/${GITHUB_REPOSITORY}/blob/main/CHANGELOG.md) 获取详细更新信息。
          EOF
          
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create GitHub Release (new releases only)
        if: steps.check_release.outputs.release_exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Kalendar ${{ steps.version.outputs.version }}
          body_path: ${{ steps.release_notes.outputs.release_notes_file }}
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'beta' || steps.version.outputs.is_tag == 'false' }}
          files: |
            dist/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APK to existing release
        if: steps.check_release.outputs.release_exists == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "📤 上传 APK 文件到现有 Release $VERSION..."
          
          # 批量上传，带重试机制
          for apk in dist/*.apk; do
            if [ -f "$apk" ]; then
              filename=$(basename "$apk")
              echo "📱 上传: $filename"
              
              for i in {1..3}; do
                if gh release upload "$VERSION" "$apk" --repo ${{ github.repository }} --clobber; then
                  echo "✅ $filename 上传成功"
                  break
                else
                  echo "❌ $filename 上传失败，重试 $i/3"
                  if [ $i -eq 3 ]; then 
                    echo "💥 $filename 最终上传失败"
                    exit 1
                  fi
                  sleep 10
                fi
              done
            fi
          done
          
          echo "🎉 所有 APK 文件上传完成"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APKs as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apk-files-foss-${{ steps.version.outputs.version }}
          path: dist/*.apk
          retention-days: 90

      - name: Summary
        run: |
          BUILD_START_TIME=$(date -d "-$((SECONDS/60)) minutes" '+%H:%M:%S')
          BUILD_DURATION="${SECONDS}s"
          
          echo "## 🎉 构建完成!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⏱️ 构建时间" >> $GITHUB_STEP_SUMMARY
          echo "- **开始时间**: ${BUILD_START_TIME}" >> $GITHUB_STEP_SUMMARY
          echo "- **构建时长**: ${BUILD_DURATION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner**: ubuntu-latest-4-cores" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 构建信息" >> $GITHUB_STEP_SUMMARY
          echo "- **版本**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **构建变体**: foss" >> $GITHUB_STEP_SUMMARY
          echo "- **发布类型**: ${{ github.event.inputs.release_type || 'beta' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **提交**: ${GITHUB_SHA:0:7}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.check_release.outputs.release_exists }}" == "true" ]]; then
            echo "### 📦 APK上传到现有Release" >> $GITHUB_STEP_SUMMARY
            echo "APK文件已上传到现有的Release，不会覆盖Release说明。" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🆕 新Release创建" >> $GITHUB_STEP_SUMMARY
            echo "已创建新的Release并上传APK文件。" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📱 生成的 APK 文件" >> $GITHUB_STEP_SUMMARY
          for apk in dist/*.apk; do
            if [ -f "$apk" ]; then
              filename=$(basename "$apk")
              size=$(du -h "$apk" | cut -f1)
              echo "- **${filename}** (${size})" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 发布链接" >> $GITHUB_STEP_SUMMARY
          echo "- [📋 GitHub Release](https://github.com/${GITHUB_REPOSITORY}/releases/tag/${{ steps.version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [📦 Actions 工件](https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})" >> $GITHUB_STEP_SUMMARY