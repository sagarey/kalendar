name: Android Emulator Testing

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      branch:
        description: '要测试的分支名称'
        required: false
        default: 'main'
        type: string
      api_level:
        description: 'Android API Level'
        required: false
        default: '34'
        type: choice
        options:
        - '30'
        - '31'
        - '33'
        - '34'

# 优化并发控制，避免重复运行
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  emulator-test:
    runs-on: ubuntu-latest-4-cores
    timeout-minutes: 30
    env:
      # 优化 Gradle 性能
      GRADLE_OPTS: -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.configureondemand=true -Dorg.gradle.jvmargs="-Xmx4g -XX:+UseG1GC"
      # Android 相关环境变量
      ANDROID_COMPILE_SDK: 34
      ANDROID_BUILD_TOOLS: 34.0.0
      ANDROID_SDK_TOOLS: 9477386
      API_LEVEL: ${{ github.event.inputs.api_level || '34' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          cache-read-only: false

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Pre-download dependencies
        run: |
          ./gradlew dependencies --no-daemon --stacktrace

      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/lib/android/sdk
            ~/.android
          key: ${{ runner.os }}-android-sdk-${{ env.API_LEVEL }}
          restore-keys: |
            ${{ runner.os }}-android-sdk-

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Enable KVM and optimize for x86_64
        run: |
          # 启用 KVM 硬件加速
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
          # 检查 KVM 支持
          if [ -r /dev/kvm ]; then
            echo "✅ KVM 硬件加速可用"
          else
            echo "⚠️ KVM 硬件加速不可用"
          fi
          
          # 显示 CPU 架构信息
          echo "🔍 CPU 架构信息:"
          lscpu | grep -E "Architecture|Model name|CPU\\(s\\):"
          
          # 检查虚拟化支持
          echo "🔍 虚拟化特性:"
          lscpu | grep -E "Virtualization|Hypervisor"

      - name: Cache Android Emulator
        uses: actions/cache@v4
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: ${{ runner.os }}-android-emulator-${{ hashFiles('~/.android/avd/**/config.ini') }}
          restore-keys: |
            ${{ runner.os }}-android-emulator-

      - name: Start Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API_LEVEL }}
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          avd-name: test-device-api${{ env.API_LEVEL }}-x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -qemu -m 2048 -smp 2 -accel kvm
          disable-animations: true
          disable-spellchecker: true
          disable-linux-hw-accel: false
          emulator-build: 7425822
          script: |
            adb devices
            adb shell settings put global window_animation_scale 0
            adb shell settings put global transition_animation_scale 0
            adb shell settings put global animator_duration_scale 0
            # 设置系统语言为简体中文
            adb shell "setprop persist.sys.locale zh-CN && setprop persist.sys.language zh && setprop persist.sys.country CN"
            adb shell "am broadcast -a android.intent.action.LOCALE_CHANGED"
            # 等待语言设置生效
            sleep 2
            # 验证语言设置
            echo "当前系统语言设置:"
            adb shell getprop persist.sys.locale
            
            # 验证模拟器架构和版本
            echo "🔍 模拟器架构信息:"
            adb shell getprop ro.product.cpu.abi
            adb shell getprop ro.product.cpu.abilist
            
            # 验证 Android 版本
            echo "🔍 Android 版本信息:"
            adb shell getprop ro.build.version.release
            adb shell getprop ro.build.version.sdk
            
            # 验证硬件加速状态
            echo "🔍 虚拟化状态:"
            adb shell getprop ro.kernel.qemu.gles || echo "物理设备或硬件加速模式"

      - name: Cache build outputs
        uses: actions/cache@v4
        with:
          path: |
            app/build/intermediates
            app/build/tmp
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Build and Install APK
        run: |
          # 构建 APK（带重试机制）
          for i in {1..3}; do
            if ./gradlew assembleFossDebug --parallel --configure-on-demand --stacktrace; then
              echo "✅ 构建成功"
              break
            else
              echo "❌ 构建失败，重试 $i/3"
              if [ $i -eq 3 ]; then exit 1; fi
              sleep 10
            fi
          done
          
          # 安装 APK（带重试机制）
          for i in {1..3}; do
            if adb install -r app/build/outputs/apk/foss/debug/app-foss-debug.apk; then
              echo "✅ 安装成功"
              break
            else
              echo "❌ 安装失败，重试 $i/3"
              if [ $i -eq 3 ]; then exit 1; fi
              sleep 5
            fi
          done

      - name: Verify and Screenshot
        run: |
          adb shell pm list packages | grep foss
          sleep 3
          adb shell screencap -p /sdcard/screenshot.png
          adb pull /sdcard/screenshot.png ./screenshot.png
          adb shell rm /sdcard/screenshot.png

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            screenshot.png
            app/build/outputs/apk/foss/debug/app-foss-debug.apk
