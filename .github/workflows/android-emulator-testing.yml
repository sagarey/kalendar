name: Android Emulator Testing

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Target branch to test'
        required: false
        default: 'main'

env:
  API_LEVEL: 34
  TARGET: default
  ARCH: x86_64
  PROFILE: Nexus 6

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  emulator-test:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      # 优化 Gradle 性能 - ubuntu-latest 4核心配置
      GRADLE_OPTS: -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Dorg.gradle.configureondemand=true -Dorg.gradle.caching=true -Dkotlin.incremental=true -Dkotlin.incremental.android=true -Dkotlin.compiler.execution.strategy=in-process -Dorg.gradle.jvmargs="-Xmx4g -XX:+UseG1GC -XX:MaxGCPauseMillis=100"
      # Android 相关环境变量 - 最新配置
      ANDROID_COMPILE_SDK: 34
      ANDROID_BUILD_TOOLS: 34.0.0
      ANDROID_SDK_TOOLS: 9477386
      ANDROID_HOME: /usr/local/lib/android/sdk
      NDK_HOME: /usr/local/lib/android/sdk/ndk/25.1.8937393

    steps:
      # ============================================
      # 阶段1: 基础环境和缓存恢复
      # ============================================
      
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 优先恢复 Android SDK 缓存
      - name: Cache Android SDK
        id: cache-android-sdk
        uses: actions/cache@v4
        with:
          path: |
            ~/.android/sdk
            ~/.android/avd
          key: ${{ runner.os }}-android-sdk-${{ env.API_LEVEL }}-v7
          restore-keys: |
            ${{ runner.os }}-android-sdk-${{ env.API_LEVEL }}-v6
            ${{ runner.os }}-android-sdk-${{ env.API_LEVEL }}-
            ${{ runner.os }}-android-sdk-

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Status Check
        run: |
          echo "📊 缓存状态检查:"
          echo "  Android SDK: ${{ steps.cache-android-sdk.outputs.cache-hit == 'true' && '✅ 缓存命中' || '📥 首次下载' }}"
          echo "  Gradle: 由 setup-gradle 自动管理"
          echo ""
          echo "📁 环境路径检查:"
          echo "  ANDROID_HOME: $ANDROID_HOME"
          echo "  SDK目录: $([ -d "$ANDROID_HOME" ] && echo "✅存在" || echo "❌缺失")"
          echo "  AVD目录: $([ -d "$HOME/.android/avd" ] && echo "✅存在" || echo "❌缺失")"

      # ============================================
      # 阶段2: 依赖下载和环境配置
      # ============================================

      - name: Pre-download dependencies
        timeout-minutes: 8
        run: |
          echo "📥 下载项目依赖..."
          echo "💾 系统资源: $(free -h | grep '^Mem:' | awk '{print $2}') 内存 | $(nproc) CPU核心"
          ./gradlew dependencies --stacktrace --no-daemon
          echo "✅ 依赖下载完成"

      - name: Setup Android Environment
        run: |
          echo "🚀 配置 Android 运行环境..."
          
          # 启用 KVM 硬件加速
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules > /dev/null
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
          # 检查 KVM 支持
          if [ -r /dev/kvm ]; then
            echo "✅ KVM 硬件加速已启用"
          else
            echo "⚠️ KVM 硬件加速不可用，将使用软件模拟"
          fi
          
          # 设置图形环境
          echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
          echo "DISPLAY=:99" >> $GITHUB_ENV
          
          echo "✅ Android 环境配置完成"

      # ============================================
      # 阶段3: AVD 准备和缓存
      # ============================================
      
      - name: Cache AVD
        id: cache-avd
        uses: actions/cache@v4
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: ${{ runner.os }}-avd-${{ env.API_LEVEL }}-nexus6-v6
          restore-keys: |
            ${{ runner.os }}-avd-${{ env.API_LEVEL }}-nexus6-v5
            ${{ runner.os }}-avd-${{ env.API_LEVEL }}-nexus6-
            ${{ runner.os }}-avd-${{ env.API_LEVEL }}-

      - name: Prepare AVD Environment
        timeout-minutes: 6
        run: |
          echo "🔧 准备 AVD 环境..."
          
          # 检查现有AVD状态
          AVD_NAME="test-api${{ env.API_LEVEL }}"
          echo "📱 目标AVD: $AVD_NAME"
          
          if [ -f "$HOME/.android/avd/${AVD_NAME}.avd/config.ini" ]; then
            echo "✅ 发现现有AVD缓存"
            AVD_SIZE=$(du -sh "$HOME/.android/avd" 2>/dev/null | cut -f1 || echo "unknown")
            echo "💾 AVD缓存大小: $AVD_SIZE"
          else
            echo "🔨 创建新的AVD..."
            echo "no" | avdmanager create avd \
              --force \
              --name "$AVD_NAME" \
              --abi "default/x86_64" \
              --package "system-images;android-${{ env.API_LEVEL }};default;x86_64" \
              --device "Nexus 6"
            
            # 优化AVD配置
            AVD_CONFIG="$HOME/.android/avd/${AVD_NAME}.avd/config.ini"
            if [ -f "$AVD_CONFIG" ]; then
              echo "⚙️ 应用性能优化配置..."
              echo "hw.cpu.ncore=2" >> "$AVD_CONFIG"
              echo "hw.ramSize=2048" >> "$AVD_CONFIG"
              echo "hw.gpu.enabled=yes" >> "$AVD_CONFIG"
              echo "hw.gpu.mode=swiftshader_indirect" >> "$AVD_CONFIG"
              echo "✅ AVD性能优化完成"
            fi
          fi
          
          # 验证AVD状态
          echo "🔍 AVD验证:"
          if avdmanager list avd | grep -q "$AVD_NAME"; then
            echo "✅ AVD准备完成: $AVD_NAME"
          else
            echo "❌ AVD创建失败"
            exit 1
          fi

      # ============================================
      # 阶段4: APK 构建
      # ============================================

      - name: Build APK
        timeout-minutes: 12
        run: |
          echo "🔨 构建 APK..."
          
          BUILD_START_TIME=$(date +%s)
          
          # 构建环境检查
          echo "🔍 构建环境:"
          echo "  内存可用: $(free -h | grep '^Mem:' | awk '{print $4}')"
          echo "  磁盘可用: $(df -h . | tail -1 | awk '{print $4}')"
          echo "  Java版本: $(java -version 2>&1 | head -1)"
          
          # 清理构建环境
          echo "🧹 清理构建环境..."
          ./gradlew clean --stacktrace
          
          # 执行构建
          echo "🔨 开始APK构建..."
          if ./gradlew assembleFossDebug --stacktrace; then
            BUILD_END_TIME=$(date +%s)
            BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
            echo "✅ APK构建成功 (${BUILD_DURATION}秒)"
            
            # 智能查找APK文件
            echo "🔍 查找构建的APK..."
            POSSIBLE_PATHS=(
              "app/build/outputs/apk/foss/debug/calendar-14.apk"
              "app/build/outputs/apk/foss/debug/app-foss-debug.apk"
            )
            
            APK_FOUND=false
            for apk_path in "${POSSIBLE_PATHS[@]}"; do
              if [ -f "$apk_path" ]; then
                APK_SIZE=$(du -h "$apk_path" | cut -f1)
                echo "✅ 找到APK: $apk_path ($APK_SIZE)"
                APK_FOUND=true
                break
              fi
            done
            
            if [ "$APK_FOUND" = false ]; then
              echo "❌ APK文件未找到"
              echo "🔍 查找所有APK文件:"
              find app/build -name "*.apk" 2>/dev/null || echo "未找到任何APK文件"
              exit 1
            fi
          else
            echo "❌ APK构建失败"
            exit 1
          fi

      # ============================================
      # 阶段5: 模拟器测试
      # ============================================

      - name: Generate AVD snapshot for caching
        if: steps.cache-avd.outputs.cache-hit != 'true'
        timeout-minutes: 5
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API_LEVEL }}
          target: ${{ env.TARGET }}
          arch: ${{ env.ARCH }}
          profile: ${{ env.PROFILE }}
          avd-name: test-api${{ env.API_LEVEL }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -memory 2048
          disable-animations: true
          disable-spellchecker: true
          disable-linux-hw-accel: false
          script: echo "📷 AVD快照生成完成"

      - name: Run Integrated Tests
        timeout-minutes: 15
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API_LEVEL }}
          target: ${{ env.TARGET }}
          arch: ${{ env.ARCH }}
          profile: ${{ env.PROFILE }}
          avd-name: test-api${{ env.API_LEVEL }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -memory 2048
          disable-animations: true
          disable-spellchecker: true
          disable-linux-hw-accel: false
          script: |
            echo "🚀 开始整合测试..."
            
            # 验证模拟器
            echo "📱 模拟器验证:"
            adb devices
            DEVICE=$(adb devices | grep emulator | cut -f1 | head -1)
            if [ -z "$DEVICE" ]; then
              echo "❌ 未找到模拟器设备"
              exit 1
            fi
            echo "✅ 模拟器设备: $DEVICE"
            
            # 安装APK
            echo "📲 安装APK:"
            POSSIBLE_PATHS=(
              "app/build/outputs/apk/foss/debug/calendar-14.apk"
              "app/build/outputs/apk/foss/debug/app-foss-debug.apk"
            )
            
            APK_PATH=""
            for path in "${POSSIBLE_PATHS[@]}"; do
              if [ -f "$path" ]; then
                APK_PATH="$path"
                break
              fi
            done
            
            if [ -n "$APK_PATH" ]; then
              echo "📱 安装: $APK_PATH"
              if adb -s $DEVICE install -r "$APK_PATH"; then
                echo "✅ APK安装成功"
                
                # 验证安装
                if adb -s $DEVICE shell pm list packages | grep -q "org.fossify.calendar"; then
                  echo "✅ 应用安装验证成功"
                else
                  echo "⚠️ 安装验证失败"
                fi
              else
                echo "⚠️ APK安装失败，但测试继续"
              fi
            else
              echo "⚠️ 未找到APK文件"
            fi
            
            # 稳定性测试 (2分钟)
            echo "🕒 稳定性测试 (2分钟):"
            SUCCESS_COUNT=0
            TOTAL_TESTS=12
            
            for i in $(seq 1 $TOTAL_TESTS); do
              printf "[$i/$TOTAL_TESTS] "
              if adb -s $DEVICE shell echo "test" >/dev/null 2>&1; then
                printf "✅"
                SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              else
                printf "❌"
              fi
              sleep 10
            done
            echo ""
            
            SUCCESS_RATE=$((SUCCESS_COUNT * 100 / TOTAL_TESTS))
            echo "📊 稳定性结果: $SUCCESS_COUNT/$TOTAL_TESTS (${SUCCESS_RATE}%)"
            
            if [ $SUCCESS_RATE -ge 80 ]; then
              echo "✅ 模拟器稳定性测试通过"
            else
              echo "⚠️ 模拟器稳定性较差"
            fi
            
            echo "🎉 整合测试完成！"

      # ============================================
      # 阶段6: 结果总结和清理
      # ============================================

      - name: Test Summary
        if: always()
        run: |
          echo "🎯 Android CI/CD 流程总结:"
          echo ""
          echo "📊 五阶段执行状态:"
          echo "  1️⃣ 基础环境+缓存: ✅"
          echo "  2️⃣ 依赖下载+配置: ✅" 
          echo "  3️⃣ AVD准备+缓存: ${{ job.status == 'success' && '✅' || '需检查' }}"
          echo "  4️⃣ APK构建: ${{ job.status == 'success' && '✅' || '需检查' }}"
          echo "  5️⃣ 模拟器测试: ${{ job.status == 'success' && '✅' || '需检查' }}"
          echo ""
          echo "🏗️ 流程架构优势:"
          echo "  ⚡ 缓存优先: SDK/AVD高效复用"
          echo "  🔍 阶段分离: 精确问题定位" 
          echo "  📈 稳定性: 预构建+预配置"
          echo "  🛡️ 容错性: 智能重试机制"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo ""
            echo "🎉 所有阶段均成功完成！"
          fi

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-test-results-${{ github.run_number }}
          path: |
            app/build/outputs/apk/foss/debug/*.apk
            build/reports/**/*
            app/build/reports/**/*
          retention-days: 7
