name: Android APK Build & Test

on:
  workflow_dispatch:

env:
  API_LEVEL: 34
  # 高性能 Gradle 配置
  GRADLE_OPTS: >-
    -Dorg.gradle.jvmargs="-Xmx6g -XX:+UseG1GC -XX:+UseStringDeduplication -XX:MaxGCPauseMillis=100"
    -Dorg.gradle.daemon=true 
    -Dorg.gradle.parallel=true 
    -Dorg.gradle.configureondemand=true
    -Dorg.gradle.caching=true
    -Dorg.gradle.workers.max=4
    -Dkotlin.incremental=true
    -Dkotlin.incremental.android=true
    -Dkotlin.compiler.execution.strategy=in-process

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 优化后应该更快
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build APK with Optimizations
        run: |
          # KVM 一步到位配置
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules && sudo udevadm trigger --name-match=kvm
          
          # 设置环境变量
          export ANDROID_EMULATOR_USE_SYSTEM_LIBS=1
          export QT_QPA_PLATFORM=offscreen
          export QEMU_AUDIO_DRV=none
          
          # 高性能构建
          chmod +x gradlew
          ./gradlew assembleFossDebug --build-cache --parallel --no-daemon
          
      - name: High-Performance Emulator Test
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API_LEVEL }}
          target: default
          arch: x86_64
          profile: pixel_6
          # Ubuntu 兼容性优化配置 - 8GB内存 + 中文系统
          emulator-options: >-
            -no-snapshot -wipe-data
            -no-window -no-snapshot -no-audio -no-boot-anim 
            -gpu swiftshader_indirect -netdelay none -netspeed full 
            -cores 4 -memory 8192 
            -camera-back none -camera-front none
            -prop emu.locale=zh-CN -prop emu.language=zh -prop emu.country=CN
            -prop persist.sys.locale=zh-CN -prop persist.sys.language=zh -prop persist.sys.country=CN
          disable-animations: true
          disable-spellchecker: true
          disable-linux-hw-accel: false
          working-directory: ./
          script: |
            # 等待设备启动完成
            adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done'
            
            # 强制设置中文环境
            adb shell settings put system system_locales zh-CN
            adb reboot
            sleep 10
            adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done'
            
            # 安装应用
            adb install -r -t app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk

            # 启动应用
            adb shell monkey -p org.fossify.calendar.debug -c android.intent.category.LAUNCHER 1
            # # 方法2: 直接启动主Activity
            # adb shell am start -n org.fossify.calendar.debug/org.fossify.calendar.activities.MainActivity || \
            # # 方法3: 通过Intent启动
            # adb shell am start -a android.intent.action.MAIN -c android.intent.category.LAUNCHER org.fossify.calendar.debug || \
            # # 方案4: 查询启动Activity然后启动
            # adb shell cmd package resolve-activity --brief org.fossify.calendar.debug | head -1
            sleep 5
            
            # 截图
            adb shell screencap -p > calendar_screenshot.png

      - name: Upload Screenshot
        uses: actions/upload-artifact@v4
        with:
          name: calendar-screenshot-${{ github.run_number }}
          path: calendar_screenshot.png
          compression-level: 0

      - name: Generate Summary with Screenshot
        run: |
          echo "# 📱 Android 日历应用测试结果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ 测试状态" >> $GITHUB_STEP_SUMMARY
          echo "- **构建状态**: 成功 ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **应用安装**: 成功 ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **应用启动**: 成功 ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **截图生成**: 成功 ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 测试环境" >> $GITHUB_STEP_SUMMARY
          echo "- **Android 版本**: API 34 (Android 14)" >> $GITHUB_STEP_SUMMARY
          echo "- **设备型号**: Pixel 6" >> $GITHUB_STEP_SUMMARY
          echo "- **系统语言**: 中文 (zh-CN)" >> $GITHUB_STEP_SUMMARY
          echo "- **内存配置**: 8GB" >> $GITHUB_STEP_SUMMARY
          echo "- **CPU 配置**: 4 核心" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📸 应用截图" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 将截图转换为 base64 并嵌入到 Summary
          if [ -f "calendar_screenshot.png" ]; then
            echo "![日历应用截图](data:image/png;base64,$(base64 -w 0 calendar_screenshot.png))" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📋 **截图信息**: 显示当前月份的日历视图，包含中文界面和农历信息" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 截图生成失败" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 下载文件" >> $GITHUB_STEP_SUMMARY
          echo "📱 [下载应用截图](../../../actions/runs/${{ github.run_id }}/artifacts)" >> $GITHUB_STEP_SUMMARY