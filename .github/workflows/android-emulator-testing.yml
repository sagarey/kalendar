name: Android Emulator Testing

on:
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

env:
  API_LEVEL: 34
  # 高性能 Gradle 配置
  GRADLE_OPTS: >-
    -Dorg.gradle.jvmargs="-Xmx6g -XX:+UseG1GC -XX:+UseStringDeduplication -XX:MaxGCPauseMillis=100"
    -Dorg.gradle.daemon=true 
    -Dorg.gradle.parallel=true 
    -Dorg.gradle.configureondemand=true
    -Dorg.gradle.caching=true
    -Dorg.gradle.workers.max=4
    -Dkotlin.incremental=true
    -Dkotlin.incremental.android=true
    -Dkotlin.compiler.execution.strategy=in-process

jobs:
  build-and-test:
    name: 构建测试
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 优化后应该更快
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Install Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: Build APK with Optimizations
        run: |
          # KVM 一步到位配置
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules && sudo udevadm trigger --name-match=kvm
          
          # 设置环境变量
          export ANDROID_EMULATOR_USE_SYSTEM_LIBS=1
          export QT_QPA_PLATFORM=offscreen
          export QEMU_AUDIO_DRV=none
          
          # 高性能构建
          chmod +x gradlew
          ./gradlew assembleFossDebug --build-cache --parallel --no-daemon
          
      - name: High-Performance Emulator Test
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API_LEVEL }}
          target: default
          arch: x86_64
          profile: pixel_6
          # Ubuntu 兼容性优化配置 - 8GB内存 + 中文系统
          emulator-options: >-
            -no-window -no-snapshot -no-audio -no-boot-anim 
            -gpu swiftshader_indirect -netdelay none -netspeed full 
            -cores 4 -memory 8192 
            -camera-back none -camera-front none
          disable-animations: true
          disable-spellchecker: true
          disable-linux-hw-accel: false
          working-directory: ./
          script: |
            # 等待设备启动完成
            adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done'
            
            # 安装应用
            adb install -r -t -g app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk

            # 启动应用并截图
            adb shell am start -W -n org.fossify.calendar.debug/org.fossify.calendar.activities.MainActivity
            sleep 2
            adb exec-out screencap -p > calendar_screenshot_en.png
            adb exec-out uiautomator dump /dev/fd/1 > calendar_layout_en.xml

            # 设置应用语言为中文并截图
            adb shell cmd locale set-app-locales org.fossify.calendar.debug --locales zh-CN
            sleep 2
            adb exec-out screencap -p > calendar_screenshot.png
            adb exec-out uiautomator dump /dev/fd/1 > calendar_layout.xml

            # 切换到暗黑模式并截图
            adb shell cmd uimode night yes
            sleep 2
            adb exec-out screencap -p > calendar_screenshot_dark.png
            adb exec-out uiautomator dump /dev/fd/1 > calendar_layout_dark.xml

      - name: AI Quality Analysis
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
        run: |
          cursor-agent -p "作为Android应用质量专家，请分析这个日历应用的测试结果：

          **分析内容：**
          1. 检查截图文件(calendar_screenshot*.png)的UI设计质量
          2. 分析布局文件(calendar_layout*.xml)的结构合理性  
          3. 评估中文本地化效果和农历功能实现
          4. 检查暗黑模式支持的完整性
          5. 评估多语言支持(中英文)的质量

          **输出要求：**
          - 使用markdown格式
          - 包含具体的技术指标和文件大小分析
          - 提供UI/UX改进建议
          - 给出1-10分的质量评分和详细理由
          - 突出应用的亮点功能

          请生成专业的质量分析报告。" --model claude-4-sonnet --output-format text > cursor_analysis_report.md

      - name: Prepare Pages artifact
        run: |
          mkdir -p public
          
          # 复制截图和布局文件
          cp calendar_screenshot_en.png public/calendar_screenshot_en_${{ github.run_id }}.png
          cp calendar_screenshot.png public/calendar_screenshot_${{ github.run_id }}.png
          cp calendar_screenshot_dark.png public/calendar_screenshot_dark_${{ github.run_id }}.png
          cp calendar_layout_en.xml public/calendar_layout_en_${{ github.run_id }}.xml
          cp calendar_layout.xml public/calendar_layout_${{ github.run_id }}.xml
          cp calendar_layout_dark.xml public/calendar_layout_dark_${{ github.run_id }}.xml
          cp .github/workflows/placeholder_1080x1.png public/placeholder_1080x1_${{ github.run_id }}.png
          
          # 创建 AI 分析报告页面
          cat > public/analysis_${{ github.run_id }}.md << 'EOF'
          ---
          layout: default
          title: "AI Quality Analysis Report #${{ github.run_id }}"
          description: "AI-powered analysis of Android calendar app testing results"
          date: ${{ github.run_number }}
          ---
          
          # 🤖 AI Quality Analysis Report
          
          **Run ID:** ${{ github.run_id }}  
          **Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')  
          **Workflow:** Android Emulator Testing
          
          ---
          
          EOF
          
          # 添加分析内容
          cat cursor_analysis_report.md >> public/analysis_${{ github.run_id }}.md
          
          # 复制 Jekyll 配置
          cp _config.yml public/
          
          # 创建主页
          cat > public/index.md << 'EOF'
          ---
          layout: default
          title: "Kalendar - Android Calendar App"
          ---
          
          # 📱 Kalendar Android Calendar App
          
          ## 🤖 Latest AI Analysis
          
          [📊 View Latest Analysis Report](analysis_${{ github.run_id }}.html)
          
          ## 📸 Screenshots
          
          ### English Interface
          ![English Interface](calendar_screenshot_en_${{ github.run_id }}.png)
          
          ### Chinese Interface  
          ![Chinese Interface](calendar_screenshot_${{ github.run_id }}.png)
          
          ### Dark Mode
          ![Dark Mode](calendar_screenshot_dark_${{ github.run_id }}.png)
          
          ## 📄 Technical Details
          
          - [English Layout XML](calendar_layout_en_${{ github.run_id }}.xml)
          - [Chinese Layout XML](calendar_layout_${{ github.run_id }}.xml)  
          - [Dark Mode Layout XML](calendar_layout_dark_${{ github.run_id }}.xml)
          
          ---
          
          *Generated automatically by GitHub Actions*
          EOF

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Generate Summary with Screenshot
        run: |
          echo "# 🤖 Android 日历应用测试结果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ 测试状态" >> $GITHUB_STEP_SUMMARY
          echo "- **构建状态**: 成功 ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **应用安装**: 成功 ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **应用启动**: 成功 ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **截图生成**: 成功 ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 测试环境" >> $GITHUB_STEP_SUMMARY
          echo "- **Android 版本**: API 34 (Android 14)" >> $GITHUB_STEP_SUMMARY
          echo "- **设备型号**: Pixel 6" >> $GITHUB_STEP_SUMMARY
          echo "- **应用语言**: 中文 (zh-CN)" >> $GITHUB_STEP_SUMMARY
          echo "- **内存配置**: 8GB" >> $GITHUB_STEP_SUMMARY
          echo "- **CPU 配置**: 4 核心" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  publish-report:
    name: 验收报告
    needs: build-and-test
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Append image link to Summary
        run: |
          URL_EN="${{ steps.deployment.outputs.page_url }}calendar_screenshot_en_${{ github.run_id }}.png"
          URL_ZH="${{ steps.deployment.outputs.page_url }}calendar_screenshot_${{ github.run_id }}.png"
          URL_DARK="${{ steps.deployment.outputs.page_url }}calendar_screenshot_dark_${{ github.run_id }}.png"
          URL_LAYOUT_EN="${{ steps.deployment.outputs.page_url }}calendar_layout_en_${{ github.run_id }}.xml"
          URL_LAYOUT_ZH="${{ steps.deployment.outputs.page_url }}calendar_layout_${{ github.run_id }}.xml"
          URL_LAYOUT_DARK="${{ steps.deployment.outputs.page_url }}calendar_layout_dark_${{ github.run_id }}.xml"
          URL_ANALYSIS="${{ steps.deployment.outputs.page_url }}analysis_${{ github.run_id }}.html"
          URL_MAIN="${{ steps.deployment.outputs.page_url }}"
          URL_PH="${{ steps.deployment.outputs.page_url }}placeholder_1080x1_${{ github.run_id }}.png"
          
          echo "## 🤖 AI Quality Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌟 [**查看完整的 AI 分析报告**](${URL_ANALYSIS}) (Markdown 渲染版本)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🏠 [**项目主页**](${URL_MAIN}) - 包含所有截图和技术细节" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📱 应用截图预览" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 英文界面 | 中文界面 | 深色模式 |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| <img alt=\"英文界面\" src=\"${URL_EN}\" style=\"width:100%;height:auto;\" /> | <img alt=\"中文界面\" src=\"${URL_ZH}\" style=\"width:100%;height:auto;\" /> | <img alt=\"深色模式\" src=\"${URL_DARK}\" style=\"width:100%;height:auto;\" /> |" >> $GITHUB_STEP_SUMMARY
          echo "| [📄 布局信息](${URL_LAYOUT_EN}) | [📄 布局信息](${URL_LAYOUT_ZH}) | [📄 布局信息](${URL_LAYOUT_DARK}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY