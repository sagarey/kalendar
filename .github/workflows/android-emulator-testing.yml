name: Android Emulator Testing

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      branch:
        description: '要测试的分支名称'
        required: false
        default: 'main'
        type: string

# 优化并发控制，避免重复运行
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  emulator-test:
    runs-on: ubuntu-latest
    timeout-minutes: 35  # 4核心优化后，缩短超时时间
    env:
      # 优化 Gradle 性能 - 4核心高性能配置
      GRADLE_OPTS: -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=6 -Dorg.gradle.configureondemand=true -Dorg.gradle.caching=true -Dkotlin.incremental=true -Dkotlin.incremental.android=true -Dkotlin.compiler.execution.strategy=in-process -Dorg.gradle.jvmargs="-Xmx6g -XX:+UseG1GC -XX:MaxGCPauseMillis=30 -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -XX:+UseFastUnorderedTimeStamps -XX:G1HeapRegionSize=16m"
      # Android 相关环境变量 - 最新配置
      ANDROID_COMPILE_SDK: 34
      ANDROID_BUILD_TOOLS: 34.0.0
      ANDROID_SDK_TOOLS: 9477386
      API_LEVEL: 34
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          cache-read-only: false

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Pre-download dependencies
        timeout-minutes: 10  # 依赖下载超时控制
        run: |
          echo "📥 下载依赖..."
          ./gradlew dependencies --no-daemon --stacktrace --parallel --max-workers=6
          echo "✅ 依赖下载完成"

      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/lib/android/sdk
            ~/.android
          key: ${{ runner.os }}-android-sdk-${{ env.API_LEVEL }}
          restore-keys: |
            ${{ runner.os }}-android-sdk-

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Android Environment
        run: |
          echo "🚀 配置 Android 环境..."
          
          # 启用 KVM 硬件加速
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
          # 检查 KVM 支持
          if [ -r /dev/kvm ]; then
            echo "✅ KVM 硬件加速可用"
          else
            echo "⚠️ KVM 硬件加速不可用"
          fi
          
          # 启动 ADB 服务器
          echo "🔧 启动 ADB 服务..."
          adb start-server
          adb devices
          
          # 设置环境变量以避免图形库冲突
          echo "🎮 配置图形环境..."
          export QT_QPA_PLATFORM=offscreen
          export DISPLAY=:99
          echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Cache Android Emulator
        uses: actions/cache@v4
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: ${{ runner.os }}-android-emulator-${{ hashFiles('~/.android/avd/**/config.ini') }}
          restore-keys: |
            ${{ runner.os }}-android-emulator-

      - name: Start Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API_LEVEL }}
          target: google_apis
          arch: x86_64
          profile: pixel_6  # 使用更现代的设备配置
          avd-name: test-device-api${{ env.API_LEVEL }}-x86_64
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -qemu -m 4096 -smp 3 -accel kvm -netdelay none -netspeed full -partition-size 8192 -wipe-data
          disable-animations: true
          disable-spellchecker: true
          disable-linux-hw-accel: false
          working-directory: ./
          script: |
            echo "📱 配置模拟器..."
            
            # 确保 ADB 连接稳定
            echo "🔧 检查 ADB 连接..."
            for i in {1..5}; do
              if adb devices | grep -q "emulator.*device"; then
                echo "✅ ADB 连接成功"
                break
              else
                echo "⏳ 等待 ADB 连接... ($i/5)"
                adb kill-server
                adb start-server
                sleep 3
              fi
            done
            
            # 验证设备状态
            adb devices -l
            
            # 等待设备完全启动
            echo "⏳ 等待系统启动..."
            adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done'
            
            # 关闭动画以加速测试
            echo "⚡ 优化性能..."
            adb shell settings put global window_animation_scale 0
            adb shell settings put global transition_animation_scale 0
            adb shell settings put global animator_duration_scale 0
            
            # 设置系统语言为简体中文
            echo "🌐 设置语言..."
            adb shell "setprop persist.sys.locale zh-CN && setprop persist.sys.language zh && setprop persist.sys.country CN"
            adb shell "am broadcast -a android.intent.action.LOCALE_CHANGED"
            sleep 2
            
            # 验证环境
            echo "🤖 Android $(adb shell getprop ro.build.version.release) (API $(adb shell getprop ro.build.version.sdk))"
            echo "🏗️ 架构: $(adb shell getprop ro.product.cpu.abi)"
            echo "✅ 模拟器就绪"

      - name: Cache build outputs
        uses: actions/cache@v4
        with:
          path: |
            app/build/intermediates
            app/build/tmp
            app/build/generated
            build/kotlin
            .gradle/kotlin-dsl
          key: ${{ runner.os }}-build-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/*.kt', '**/*.java') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Build and Install APK
        timeout-minutes: 12  # 4核心构建应该更快
        run: |
          echo "🔨 构建 APK..."
          BUILD_START_TIME=$(date +%s)
          
          if ./gradlew assembleFossDebug --configure-on-demand --stacktrace --build-cache --parallel --max-workers=6; then
            BUILD_END_TIME=$(date +%s)
            BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
            echo "✅ 构建成功 (${BUILD_DURATION}s)"
          else
            echo "❌ 构建失败"
            exit 1
          fi
          
          # 安装 APK
          APK_PATH="app/build/outputs/apk/foss/debug/app-foss-debug.apk"
          if [ -f "$APK_PATH" ]; then
            APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
            echo "📱 APK: $APK_SIZE"
            
            # 确保 ADB 连接正常
            if ! adb devices | grep -q "emulator.*device"; then
              echo "⚠️ ADB 连接异常，重新连接..."
              adb kill-server
              adb start-server
              sleep 2
            fi
            
            # 安装 APK
            echo "📲 安装 APK..."
            if adb install -r -t "$APK_PATH"; then
              echo "✅ 安装成功"
            else
              echo "❌ 安装失败，尝试卸载后重新安装..."
              adb uninstall org.fossify.calendar 2>/dev/null || true
              if adb install -r -t "$APK_PATH"; then
                echo "✅ 重新安装成功"
              else
                echo "❌ 安装最终失败"
                adb logcat -d | tail -20
                exit 1
              fi
            fi
          else
            echo "❌ APK 文件不存在"
            exit 1
          fi

      - name: Test and Verify Installation
        run: |
          echo "🔍 验证应用..."
          
          # 检查安装
          PACKAGE_NAME="org.fossify.calendar"
          if adb shell pm list packages | grep -q "$PACKAGE_NAME"; then
            echo "✅ 应用已安装: $PACKAGE_NAME"
          else
            echo "❌ 应用未找到"
            exit 1
          fi
          
          # 尝试启动应用
          echo "🚀 启动应用..."
          adb shell am start -n "$PACKAGE_NAME/.activities.SplashActivity" || \
          adb shell am start -n "$PACKAGE_NAME/.activities.MainActivity" || \
          echo "⚠️ 启动失败"
          
          sleep 3
          
          # 截图
          echo "📸 截图..."
          if adb shell screencap -p /sdcard/screenshot.png && adb pull /sdcard/screenshot.png ./screenshot.png; then
            echo "✅ 截图成功 ($(du -h ./screenshot.png | cut -f1))"
            adb shell rm /sdcard/screenshot.png
          else
            echo "❌ 截图失败"
          fi
          
          # 收集日志
          adb logcat -d | grep "$PACKAGE_NAME" | tail -5 > app_logs.txt || true
          if [ -s app_logs.txt ]; then
            echo "✅ 收集到应用日志"
          fi

      - name: Upload Test Results and Build Logs
        uses: actions/upload-artifact@v4
        with:
          name: android-test-results-${{ github.run_number }}
          path: |
            screenshot.png
            app_logs.txt
            app/build/outputs/apk/foss/debug/app-foss-debug.apk
            build/reports/**/*
            app/build/reports/**/*
            gradle-build-scan-*.txt
          retention-days: 30

      - name: Test Summary
        if: always()
        run: |
          BRANCH_NAME="${{ github.event.inputs.branch || github.ref_name }}"
          
          echo "## 🧪 Android 模拟器测试" >> $GITHUB_STEP_SUMMARY
          echo "- **分支**: $BRANCH_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- **提交**: ${GITHUB_SHA:0:7}" >> $GITHUB_STEP_SUMMARY
          echo "- **Android API**: ${{ env.API_LEVEL }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 检查结果
          if [ -f "screenshot.png" ]; then
            echo "### ✅ 测试成功" >> $GITHUB_STEP_SUMMARY
            echo "- APK 安装并启动成功" >> $GITHUB_STEP_SUMMARY
            echo "- 截图: $(du -h screenshot.png | cut -f1)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ 测试失败" >> $GITHUB_STEP_SUMMARY
            echo "详见运行日志" >> $GITHUB_STEP_SUMMARY
          fi
