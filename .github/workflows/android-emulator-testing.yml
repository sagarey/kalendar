name: Android Emulator Testing

on:
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

env:
  API_LEVEL: 34
  # 高性能 Gradle 配置
  GRADLE_OPTS: >-
    -Dorg.gradle.jvmargs="-Xmx6g -XX:+UseG1GC -XX:+UseStringDeduplication -XX:MaxGCPauseMillis=100"
    -Dorg.gradle.daemon=true 
    -Dorg.gradle.parallel=true 
    -Dorg.gradle.configureondemand=true
    -Dorg.gradle.caching=true
    -Dorg.gradle.workers.max=4
    -Dkotlin.incremental=true
    -Dkotlin.incremental.android=true
    -Dkotlin.compiler.execution.strategy=in-process

jobs:
  build-and-test:
    name: 构建测试
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Add AI Analysis Task to Cursor Rules
        run: |
          # 添加 AI 分析预设任务
          echo "" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "## 预设任务列表" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "### 提交AI分析" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "- 使用 mobile-mcp 工具连接到 Android 模拟器进行实时交互，获取界面元素信息和布局结构" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "- 重点场景、步骤可以截图，并集合无障碍信息等给出分析" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "- 着重评估、测试提交信息中提到的应用功能改动，如果提交信息中没有提到应用调整，则简单评估是否闪退" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "- 生成图文混排的专业 markdown 格式中文测试分析报告，尽量精简" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "- 当前提交标题：$(git log -1 --pretty=format:'%s')" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "- 当前提交详细信息：$(git log -1 --pretty=format:'%B' | head -n 5 | tr '\n' ' ')" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "" >> .cursor/rules/kalendar-cursor-rule.mdc

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Install Android System Image
        run: |
          # 安装 Android API 34 系统镜像
          echo "安装 Android API ${{ env.API_LEVEL }} 系统镜像..."
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "system-images;android-${{ env.API_LEVEL }};default;x86_64"
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools"
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "emulator"
          echo "✅ 系统镜像安装完成"

      - name: Install Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: Setup Node.js for mobile-mcp
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install mobile-mcp
        run: |
          # 全局安装 mobile-mcp
          npm install -g @mobilenext/mobile-mcp@latest
          npx @mobilenext/mobile-mcp --version

      - name: Build APK with Optimizations
        run: |
          # 高性能构建
          chmod +x gradlew
          ./gradlew assembleFossDebug --build-cache --parallel --no-daemon
          
      - name: Create and Start Android Emulator
        env:
          # 模拟器环境变量 - 与原配置对齐
          ANDROID_EMULATOR_USE_SYSTEM_LIBS: 1
          QT_QPA_PLATFORM: offscreen
          QEMU_AUDIO_DRV: none
          # 修复 AVD 路径问题
          ANDROID_AVD_HOME: /home/runner/.config/.android/avd
        run: |
          # KVM 配置 - 与原配置对齐
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules && sudo udevadm trigger --name-match=kvm
          
          # 确保 AVD 目录存在
          mkdir -p "$ANDROID_AVD_HOME"
          
          # 创建 AVD
          echo "正在创建 Android 模拟器..."
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
            --force \
            --name test_emulator \
            --abi default/x86_64 \
            --package "system-images;android-${{ env.API_LEVEL }};default;x86_64" \
            --device "pixel_6"
          
          # 检查 AVD 创建结果
          if [ $? -ne 0 ]; then
            echo "❌ AVD 创建失败"
            exit 1
          fi
          
          echo "✅ AVD 创建成功"
          
          # 启动模拟器
          echo "正在启动 Android 模拟器..."
          
          # 使用环境变量确保模拟器找到正确的 AVD 路径
          export ANDROID_AVD_HOME="/home/runner/.config/.android/avd"
          
          nohup $ANDROID_HOME/emulator/emulator -avd test_emulator \
            -no-window -no-snapshot -no-audio -no-boot-anim \
            -gpu swiftshader_indirect -netdelay none -netspeed full \
            -cores 4 -memory 8192 \
            -camera-back none -camera-front none \
            -wipe-data > emulator.log 2>&1 &
          
          echo "模拟器进程已启动，PID: $!"
          
          # 等待设备连接
          echo "等待设备连接..."
          timeout 30 adb wait-for-device
          
          if [ $? -ne 0 ]; then
            echo "❌ 设备连接超时"
            cat emulator.log
            exit 1
          fi
          
          echo "✅ 设备已连接"
          
          # 等待系统启动完成
          echo "等待系统启动完成..."
          timeout 30 bash -c 'while [ "$(adb shell getprop sys.boot_completed 2>/dev/null)" != "1" ]; do sleep 2; done'
          
          if [ $? -ne 0 ]; then
            echo "❌ 系统启动超时"
            exit 1
          fi
          
          # 配置模拟器设置
          adb shell settings put global window_animation_scale 0.0
          adb shell settings put global transition_animation_scale 0.0
          adb shell settings put global animator_duration_scale 0.0
          adb shell settings put secure spell_checker_enabled 0
          
          echo "✅ Android 模拟器启动完成"

      - name: Install App and Run Tests
        run: |
          # 安装应用
          echo "安装应用..."
          adb install -r -t -g app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk

          # 启动应用并截图（英文界面）
          echo "启动应用并截图（英文界面）..."
          adb shell am start -W -n org.fossify.calendar.debug/org.fossify.calendar.activities.MainActivity
          sleep 3
          adb exec-out screencap -p > calendar_screenshot_en.png
          adb exec-out uiautomator dump /dev/fd/1 > calendar_layout_en.xml

          # 设置应用语言为中文并截图
          echo "设置中文语言并截图..."
          adb shell cmd locale set-app-locales org.fossify.calendar.debug --locales zh-CN
          sleep 3
          adb exec-out screencap -p > calendar_screenshot.png
          adb exec-out uiautomator dump /dev/fd/1 > calendar_layout.xml

          # 切换到暗黑模式并截图
          echo "切换到暗黑模式并截图..."
          adb shell cmd uimode night yes
          sleep 3
          adb exec-out screencap -p > calendar_screenshot_dark.png
          adb exec-out uiautomator dump /dev/fd/1 > calendar_layout_dark.xml

          echo "✅ 应用测试完成"

      - name: Run AI Analysis
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
        run: |
          # AI 分析
          echo "开始 AI 分析..."
          cursor-agent -f -p "测试应用 org.fossify.calendar.debug 已完成安装且当前就是打开应用的状态, 使用 adb uiautomator 等工具获取布局、截图等信息进行分析，模拟打开应用的设置，记录每步带截图（截图存储命名为 report_screencap_xx.png，xx 为步骤，引用到报告中直接使用 report_screencap_xx.png 路径，可以平铺多个个步骤展示）的详细单文件 HTML 代码格式的报告到 index.html 文件中。" --model claude-4-sonnet --output-format text > ai_analysis_report.text
          echo "✅ AI 分析完成"

      - name: Stop Emulator
        if: always()
        run: |
          # 停止模拟器
          echo "停止 Android 模拟器..."
          adb devices | grep emulator | cut -f1 | while read line; do adb -s $line emu kill; done
          pkill -f emulator || true
          echo "✅ 模拟器已停止"

      - name: Prepare Pages artifact
        run: |
          mkdir -p public
          
          # 将 cursor-agent 生成的 HTML 报告作为首页
          cp index.html public/
          
          # 复制所有报告相关的截图文件
          cp report_screencap_*.png public/ 2>/dev/null || echo "没有找到 report_screencap_*.png 文件"
          
          # 复制基础截图和布局文件（保持兼容性）
          cp calendar_screenshot_en.png public/ 2>/dev/null || echo "没有找到 calendar_screenshot_en.png"
          cp calendar_screenshot.png public/ 2>/dev/null || echo "没有找到 calendar_screenshot.png"
          cp calendar_screenshot_dark.png public/ 2>/dev/null || echo "没有找到 calendar_screenshot_dark.png"
          cp calendar_layout_en.xml public/ 2>/dev/null || echo "没有找到 calendar_layout_en.xml"
          cp calendar_layout.xml public/ 2>/dev/null || echo "没有找到 calendar_layout.xml"
          cp calendar_layout_dark.xml public/ 2>/dev/null || echo "没有找到 calendar_layout_dark.xml"
          
          # 复制 Jekyll 配置（如果存在）
          cp _config.yml public/ 2>/dev/null || echo "没有找到 _config.yml"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Generate Summary with Screenshot
        run: |
          echo "# 🤖 Android 日历应用测试结果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ 测试状态" >> $GITHUB_STEP_SUMMARY
          echo "- **构建状态**: 成功 ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **应用安装**: 成功 ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **应用启动**: 成功 ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **AI 分析**: 成功 ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **报告生成**: 成功 ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 测试环境" >> $GITHUB_STEP_SUMMARY
          echo "- **Android 版本**: API 34 (Android 14)" >> $GITHUB_STEP_SUMMARY
          echo "- **设备型号**: Pixel 6" >> $GITHUB_STEP_SUMMARY
          echo "- **应用语言**: 中文 (zh-CN)" >> $GITHUB_STEP_SUMMARY
          echo "- **内存配置**: 8GB" >> $GITHUB_STEP_SUMMARY
          echo "- **CPU 配置**: 4 核心" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  publish-report:
    name: 验收报告
    needs: build-and-test
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Append report link to Summary
        run: |
          URL_MAIN="${{ steps.deployment.outputs.page_url }}"
          
          echo "## 🤖 AI 质量分析报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌟 [**查看完整的 AI 分析报告**](${URL_MAIN}) - 由 Cursor AI Agent 自动生成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **报告内容包括:**" >> $GITHUB_STEP_SUMMARY
          echo "- 应用功能分析和测试结果" >> $GITHUB_STEP_SUMMARY
          echo "- 界面截图和布局分析" >> $GITHUB_STEP_SUMMARY
          echo "- 用户体验评估" >> $GITHUB_STEP_SUMMARY
          echo "- 问题发现和改进建议" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY