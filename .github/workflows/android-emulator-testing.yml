name: Android Emulator Testing

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Target branch to test'
        required: false
        default: 'main'

env:
  API_LEVEL: 34
  TARGET: default
  ARCH: x86_64
  PROFILE: Nexus 6

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  emulator-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      # 优化 Gradle 性能 - ubuntu-latest 4核心配置
      GRADLE_OPTS: -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Dorg.gradle.configureondemand=true -Dorg.gradle.caching=true -Dkotlin.incremental=true -Dkotlin.incremental.android=true -Dkotlin.compiler.execution.strategy=in-process -Dorg.gradle.jvmargs="-Xmx4g -XX:+UseG1GC -XX:MaxGCPauseMillis=100"
      # Android 相关环境变量 - 最新配置
      ANDROID_COMPILE_SDK: 34
      ANDROID_BUILD_TOOLS: 34.0.0
      ANDROID_SDK_TOOLS: 9477386
      ANDROID_HOME: /usr/local/lib/android/sdk
      NDK_HOME: /usr/local/lib/android/sdk/ndk/25.1.8937393

    steps:
      # ============================================
      # 阶段1: 基础环境和缓存恢复
      # ============================================
      
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 优先恢复 Android SDK 缓存 (纯SDK，不包含AVD)
      - name: Cache Android SDK
        id: cache-android-sdk
        uses: actions/cache@v4
        with:
          path: ~/.android/sdk
          key: ${{ runner.os }}-android-sdk-${{ env.API_LEVEL }}-v8
          restore-keys: |
            ${{ runner.os }}-android-sdk-${{ env.API_LEVEL }}-v7
            ${{ runner.os }}-android-sdk-${{ env.API_LEVEL }}-
            ${{ runner.os }}-android-sdk-

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # ============================================
      # 阶段2: 依赖下载和环境配置
      # ============================================

      - name: Pre-download dependencies
        timeout-minutes: 5
        run: |
          echo "📥 下载项目依赖..."
          echo "💾 系统资源: $(free -h | grep '^Mem:' | awk '{print $2}') 内存 | $(nproc) CPU核心"
          ./gradlew dependencies --stacktrace --no-daemon
          echo "✅ 依赖下载完成"

      - name: Setup Android Environment
        run: |
          echo "🚀 配置 Android 运行环境..."
          
          # 启用 KVM 硬件加速
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules > /dev/null
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
          # 检查 KVM 支持
          if [ -r /dev/kvm ]; then
            echo "✅ KVM 硬件加速已启用"
          else
            echo "⚠️ KVM 硬件加速不可用，将使用软件模拟"
          fi
          
          # 设置图形环境
          echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
          echo "DISPLAY=:99" >> $GITHUB_ENV
          
          echo "✅ Android 环境配置完成"

      # ============================================
      # 阶段3: AVD 准备、缓存和快照生成
      # ============================================
      
      - name: Cache AVD
        id: cache-avd
        uses: actions/cache@v4
        with:
          path: ~/.android/avd
          key: ${{ runner.os }}-avd-${{ env.API_LEVEL }}-nexus6-v7
          restore-keys: |
            ${{ runner.os }}-avd-${{ env.API_LEVEL }}-nexus6-v6
            ${{ runner.os }}-avd-${{ env.API_LEVEL }}-nexus6-
            ${{ runner.os }}-avd-${{ env.API_LEVEL }}-

      - name: Prepare AVD Environment
        timeout-minutes: 6
        run: |
          echo "🔧 准备 AVD 环境..."
          
          # 检查并安装必要的system-images
          SYSTEM_IMAGE="system-images;android-${{ env.API_LEVEL }};default;x86_64"
          echo "📦 检查系统镜像: $SYSTEM_IMAGE"
          
          # 安装系统镜像 (如果不存在)
          if ! sdkmanager --list_installed | grep -q "$SYSTEM_IMAGE"; then
            echo "📥 下载系统镜像..."
            echo "y" | sdkmanager "$SYSTEM_IMAGE"
          else
            echo "✅ 系统镜像已存在"
          fi
          
          # 检查现有AVD状态
          AVD_NAME="test-api${{ env.API_LEVEL }}"
          echo "📱 目标AVD: $AVD_NAME"
          
          if [ -f "$HOME/.android/avd/${AVD_NAME}.avd/config.ini" ]; then
            echo "✅ 发现现有AVD缓存"
            AVD_SIZE=$(du -sh "$HOME/.android/avd" 2>/dev/null | cut -f1 || echo "unknown")
            echo "💾 AVD缓存大小: $AVD_SIZE"
          else
            echo "🔨 创建新的AVD..."
            echo "no" | avdmanager create avd \
              --force \
              --name "$AVD_NAME" \
              --abi "default/x86_64" \
              --package "$SYSTEM_IMAGE" \
              --device "Nexus 6"
            
            # 优化AVD配置
            AVD_CONFIG="$HOME/.android/avd/${AVD_NAME}.avd/config.ini"
            if [ -f "$AVD_CONFIG" ]; then
              echo "⚙️ 应用性能优化配置..."
              echo "hw.cpu.ncore=2" >> "$AVD_CONFIG"
              echo "hw.ramSize=2048" >> "$AVD_CONFIG"
              echo "hw.gpu.enabled=yes" >> "$AVD_CONFIG"
              echo "hw.gpu.mode=swiftshader_indirect" >> "$AVD_CONFIG"
              echo "✅ AVD性能优化完成"
            fi
          fi
          
          # 验证AVD状态
          echo "🔍 AVD验证:"
          if avdmanager list avd | grep -q "$AVD_NAME"; then
            echo "✅ AVD准备完成: $AVD_NAME"
          else
            echo "❌ AVD创建失败"
            exit 1
          fi

      - name: Complete Cache Status Check
        run: |
          echo "📊 完整缓存状态检查 (所有缓存操作完成后):"
          echo "  🏗️ Gradle缓存: 由 setup-gradle 自动管理"
          echo "  📱 Android SDK: ${{ steps.cache-android-sdk.outputs.cache-hit == 'true' && '✅ 缓存命中' || '📥 首次下载' }}"
          echo "  🎮 AVD缓存: ${{ steps.cache-avd.outputs.cache-hit == 'true' && '✅ 缓存命中' || '📥 首次创建' }}"
          echo ""
          echo "📁 环境路径检查:"
          echo "  ANDROID_HOME: $ANDROID_HOME"
          echo "  SDK目录: $([ -d "$ANDROID_HOME" ] && echo "✅存在 ($(du -sh $ANDROID_HOME 2>/dev/null | cut -f1 || echo 'unknown'))" || echo "❌缺失")"
          echo "  AVD目录: $([ -d "$HOME/.android/avd" ] && echo "✅存在 ($(du -sh $HOME/.android/avd 2>/dev/null | cut -f1 || echo 'unknown'))" || echo "❌缺失")"
          echo ""
          echo "🔑 缓存键信息:"
          echo "  SDK键: ${{ runner.os }}-android-sdk-${{ env.API_LEVEL }}-v8"
          echo "  AVD键: ${{ runner.os }}-avd-${{ env.API_LEVEL }}-nexus6-v7"
          echo ""
          echo "📊 缓存效果:"
          echo "  预计性能提升: ${{ (steps.cache-android-sdk.outputs.cache-hit == 'true' && steps.cache-avd.outputs.cache-hit == 'true') && '🚀 双缓存命中，最佳性能' || '⚡ 部分缓存命中，性能提升' }}"

      - name: Create AVD snapshot for future caching
        if: steps.cache-avd.outputs.cache-hit != 'true'
        timeout-minutes: 5
        continue-on-error: true  # 🔥 关键修复：快照失败不影响整体流程
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API_LEVEL }}
          target: ${{ env.TARGET }}
          arch: ${{ env.ARCH }}
          profile: ${{ env.PROFILE }}
          avd-name: test-api${{ env.API_LEVEL }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -memory 2048
          disable-animations: true
          disable-spellchecker: true
          disable-linux-hw-accel: false
          script: |
            echo "📷 尝试创建AVD快照用于未来缓存..."
            echo "🎯 目的: 为后续workflow运行建立快速启动快照"
            echo "⚡ 预期效果: 成功时下次启动从3-4分钟减少到30-60秒"
            echo "🛡️ 容错机制: 快照创建失败不影响整体测试流程"
            echo "✅ AVD快照尝试完成，成功时将保存到缓存"

      # ============================================
      # 阶段4: APK 构建
      # ============================================

      - name: Build APK
        timeout-minutes: 10
        run: |
          echo "🔨 构建 APK..."
          
          BUILD_START_TIME=$(date +%s)
          
          # 构建环境检查
          echo "🔍 构建环境:"
          echo "  内存可用: $(free -h | grep '^Mem:' | awk '{print $4}')"
          echo "  磁盘可用: $(df -h . | tail -1 | awk '{print $4}')"
          echo "  Java版本: $(java -version 2>&1 | head -1)"
          
          # 清理构建环境
          echo "🧹 清理构建环境..."
          ./gradlew clean --stacktrace
          
          # 执行构建
          echo "🔨 开始APK构建..."
          if ./gradlew assembleFossDebug --stacktrace; then
            BUILD_END_TIME=$(date +%s)
            BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
            echo "✅ APK构建成功 (${BUILD_DURATION}秒)"
            
            # 验证固定的APK文件
            APK_PATH="app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk"
            echo "🔍 验证APK文件: $APK_PATH"
            
            if [ -f "$APK_PATH" ]; then
              APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
              echo "✅ APK构建成功: $APK_PATH ($APK_SIZE)"
            else
              echo "❌ 预期APK文件未找到: $APK_PATH"
              echo "🔍 检查构建输出:"
              find app/build/outputs/apk -name "*.apk" 2>/dev/null | head -5 || echo "未找到任何APK文件"
              ls -la app/build/outputs/apk/foss/debug/ 2>/dev/null || echo "debug目录不存在"
              exit 1
            fi
          else
            echo "❌ APK构建失败"
            exit 1
          fi

      # ============================================
      # 阶段5: 模拟器测试 (使用预准备的快照)
      # ============================================

      - name: Pre-Test Environment Check
        run: |
          echo "🔍 测试前环境检查..."
          
          echo "📊 系统资源:"
          echo "  内存: $(free -h | grep '^Mem:' | awk '{print $2" 总量, "$4" 可用"}')"
          echo "  CPU: $(nproc) 核心"
          echo "  磁盘: $(df -h . | tail -1 | awk '{print $4" 可用"}')"
          
          echo "📱 AVD状态:"
          AVD_NAME="test-api${{ env.API_LEVEL }}"
          if [ -f "$HOME/.android/avd/${AVD_NAME}.avd/config.ini" ]; then
            echo "  ✅ AVD配置存在"
            if [ -d "$HOME/.android/avd/${AVD_NAME}.avd/snapshots" ]; then
              SNAPSHOT_COUNT=$(find "$HOME/.android/avd/${AVD_NAME}.avd/snapshots" -name "*.snapshot" 2>/dev/null | wc -l)
              echo "  📷 快照文件: $SNAPSHOT_COUNT 个"
            else
              echo "  📷 快照文件: 无 (首次启动会较慢)"
            fi
          else
            echo "  ❌ AVD配置缺失"
            exit 1
          fi
          
          echo "📦 APK状态:"
          APK_PATH="app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk"
          if [ -f "$APK_PATH" ]; then
            APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
            echo "  ✅ APK准备就绪: $APK_SIZE"
          else
            echo "  ❌ APK文件缺失: $APK_PATH"
            exit 1
          fi
          
          echo "🚀 预检查完成，开始模拟器测试..."

      - name: Run Integrated Tests
        timeout-minutes: 15
        continue-on-error: false  # 主测试步骤必须成功
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API_LEVEL }}
          target: ${{ env.TARGET }}
          arch: ${{ env.ARCH }}
          profile: ${{ env.PROFILE }}
          avd-name: test-api${{ env.API_LEVEL }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -memory 2048
          disable-animations: true
          disable-spellchecker: true
          disable-linux-hw-accel: false
          script: |
            set -e  # 启用错误退出
            echo "🚀 开始整合测试..."
            
            # 详细的环境诊断
            echo "🔍 环境诊断:"
            echo "  Shell: $0"
            echo "  PWD: $(pwd)"
            echo "  用户: $(whoami)"
            
            # 验证模拟器
            echo "📱 模拟器验证:"
            echo "🔍 ADB状态:"
            adb devices || {
              echo "❌ ADB devices命令失败"
              adb start-server
              sleep 2
              adb devices
            }
            
            echo "🔍 详细设备信息:"
            adb devices -l 2>/dev/null || echo "详细设备信息获取失败"
            
            DEVICE=$(adb devices | grep emulator | cut -f1 | head -1)
            echo "🔍 提取的设备: '$DEVICE'"
            
            if [ -z "$DEVICE" ]; then
              echo "❌ 未找到模拟器设备"
              echo "🔍 完整adb devices输出:"
              adb devices
              echo "🔍 进程检查:"
              ps aux | grep emulator | head -5 || echo "未找到emulator进程"
              exit 1
            fi
            echo "✅ 模拟器设备: $DEVICE"
            
            # 安装固定路径的APK
            APK_PATH="app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk"
            echo "📲 安装APK: $APK_PATH"
            
            echo "🔍 APK路径检查:"
            echo "  当前目录: $(pwd)"
            echo "  APK路径: $APK_PATH"
            echo "  文件存在: $([ -f "$APK_PATH" ] && echo "✅ 是" || echo "❌ 否")"
            
            if [ -f "$APK_PATH" ]; then
              APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
              echo "📱 找到APK: $APK_SIZE"
              
              echo "🔍 设备连接测试:"
              if adb -s $DEVICE shell echo "连接测试" >/dev/null 2>&1; then
                echo "✅ 设备连接正常"
              else
                echo "❌ 设备连接异常"
                exit 1
              fi
              
              echo "📲 执行APK安装..."
              if adb -s $DEVICE install -r "$APK_PATH"; then
                echo "✅ APK安装成功"
                
                # 验证安装
                echo "🔍 验证应用安装:"
                if adb -s $DEVICE shell pm list packages | grep -q "org.fossify.calendar"; then
                  echo "✅ 应用安装验证成功"
                else
                  echo "⚠️ 安装验证失败"
                fi
              else
                echo "⚠️ APK安装失败，但测试继续"
              fi
            else
              echo "❌ 预期APK文件不存在: $APK_PATH"
              echo "🔍 搜索可能的APK文件:"
              find . -name "*.apk" 2>/dev/null | head -5 || echo "未找到任何APK文件"
              echo "❌ 无法继续测试"
              exit 1
            fi
            
            # 稳定性测试 (2分钟) - 使用POSIX兼容语法
            echo "🕒 稳定性测试 (2分钟):"
            SUCCESS_COUNT=0
            TOTAL_TESTS=12
            
            echo "🔍 开始连续性测试..."
            i=1
            while [ $i -le $TOTAL_TESTS ]; do
              printf "[$i/$TOTAL_TESTS] "
              
              if adb -s "$DEVICE" shell echo "test" >/dev/null 2>&1; then
                printf "✅"
                SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              else
                printf "❌"
                echo ""
                echo "🔍 第${i}次测试失败，检查设备状态:"
                adb -s "$DEVICE" shell getprop sys.boot_completed 2>/dev/null || echo "无法获取启动状态"
              fi
              
              sleep 10
              i=$((i + 1))
            done
            echo ""
            
            # 安全的除法计算
            if [ $TOTAL_TESTS -gt 0 ]; then
              SUCCESS_RATE=$((SUCCESS_COUNT * 100 / TOTAL_TESTS))
            else
              SUCCESS_RATE=0
            fi
            
            echo "📊 稳定性结果: $SUCCESS_COUNT/$TOTAL_TESTS (${SUCCESS_RATE}%)"
            
            if [ $SUCCESS_RATE -ge 80 ]; then
              echo "✅ 模拟器稳定性测试通过"
            else
              echo "⚠️ 模拟器稳定性较差，但不影响整体测试结果"
            fi
            
            echo "🎉 整合测试完成！"

      # ============================================
      # 阶段6: 结果总结和清理
      # ============================================

      - name: Test Summary
        if: always()
        run: |
          echo "🎯 Android CI/CD 流程总结:"
          echo ""
          echo "📊 五阶段执行状态:"
          echo "  1️⃣ 基础环境+缓存恢复: ✅"
          echo "  2️⃣ 依赖下载+环境配置: ✅" 
          echo "  3️⃣ AVD准备+快照生成: ${{ job.status == 'success' && '✅' || '需检查' }}"
          echo "  4️⃣ APK独立构建: ${{ job.status == 'success' && '✅' || '需检查' }}"
          echo "  5️⃣ 模拟器整合测试: ${{ job.status == 'success' && '✅' || '需检查' }}"
          echo ""
          echo "🏗️ 流程架构优势 (v2.0优化版):"
          echo "  ⚡ 分离式缓存: SDK/AVD独立缓存管理"
          echo "  🔍 阶段分离: 精确问题定位" 
          echo "  📈 稳定性: 预构建+预配置+固定APK"
          echo "  🛡️ 容错性: 智能重试机制"
          echo "  ⏱️ 性能优化: 30分钟总超时(40→30分钟)"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo ""
            echo "🎉 所有阶段均成功完成！"
          fi

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-test-results-${{ github.run_number }}
          path: |
            app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk
            build/reports/**/*
            app/build/reports/**/*
          retention-days: 7
