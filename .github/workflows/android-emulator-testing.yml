name: Android Emulator Testing

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Target branch to test'
        required: false
        default: 'main'

env:
  API_LEVEL: 34
  TARGET: default
  ARCH: x86_64
  PROFILE: Nexus 6

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  emulator-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      # 优化 Gradle 性能 - ubuntu-latest 4核心配置
      GRADLE_OPTS: -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Dorg.gradle.configureondemand=true -Dorg.gradle.caching=true -Dkotlin.incremental=true -Dkotlin.incremental.android=true -Dkotlin.compiler.execution.strategy=in-process -Dorg.gradle.jvmargs="-Xmx4g -XX:+UseG1GC -XX:MaxGCPauseMillis=100"
      # Android 相关环境变量 - 最新配置
      ANDROID_COMPILE_SDK: 34
      ANDROID_BUILD_TOOLS: 34.0.0
      ANDROID_SDK_TOOLS: 9477386
      ANDROID_HOME: /usr/local/lib/android/sdk
      NDK_HOME: /usr/local/lib/android/sdk/ndk/25.1.8937393

    steps:
      # ============================================
      # 阶段1: 代码获取和缓存预检
      # ============================================
      
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      # ============================================
      # 缓存策略决策：检查 → 还原 or 初始化
      # ============================================

      - name: Check Cache Availability
        id: check-cache
        run: |
          echo "🔍 检查缓存可用性..."
          echo ""
          echo "📋 缓存键信息 (v11统一版本):"
          echo "  SDK缓存键: ${{ runner.os }}-android-sdk-${{ env.API_LEVEL }}-v11"
          echo "  AVD缓存键: ${{ runner.os }}-avd-${{ env.API_LEVEL }}-nexus6-v11"
          echo ""
          echo "📁 初始本地文件检查:"
          echo "  SDK目录: $([ -d "$HOME/.android/sdk" ] && echo '✅ 存在' || echo '❌ 不存在')"
          echo "  AVD目录: $([ -d "$HOME/.android/avd" ] && echo '✅ 存在' || echo '❌ 不存在')"
          echo ""
          echo "🎯 接下来将尝试缓存恢复..."
          echo "⚠️  注意: 如果缓存未命中，将进行完整的SDK/AVD初始化"

      - name: Restore Android SDK Cache
        id: restore-sdk-cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.android/sdk
          key: ${{ runner.os }}-android-sdk-${{ env.API_LEVEL }}-v11

      - name: Restore AVD Cache
        id: restore-avd-cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.android/avd
          key: ${{ runner.os }}-avd-${{ env.API_LEVEL }}-nexus6-v11

      - name: Cache Strategy Decision
        run: |
          echo "🎯 缓存策略决策："
          echo ""
          echo "📊 缓存恢复结果:"
          echo "  📱 Android SDK: ${{ steps.restore-sdk-cache.outputs.cache-hit == 'true' && '✅ 成功恢复' || '❌ 需要初始化' }}"
          echo "  🎮 AVD配置: ${{ steps.restore-avd-cache.outputs.cache-hit == 'true' && '✅ 成功恢复' || '❌ 需要初始化' }}"
          echo ""
          echo "📁 恢复后文件检查:"
          echo "  SDK目录: $([ -d "$HOME/.android/sdk" ] && du -sh "$HOME/.android/sdk" 2>/dev/null | cut -f1 || echo '❌ 不存在')"
          echo "  AVD目录: $([ -d "$HOME/.android/avd" ] && du -sh "$HOME/.android/avd" 2>/dev/null | cut -f1 || echo '❌ 不存在')"
          echo ""
          echo "🔄 执行策略分流:"
          if [ "${{ steps.restore-sdk-cache.outputs.cache-hit }}" = "true" ] && [ "${{ steps.restore-avd-cache.outputs.cache-hit }}" = "true" ]; then
            echo "  🚀 路径A: 双缓存恢复成功 → 跳过初始化，直接验证"
          elif [ "${{ steps.restore-sdk-cache.outputs.cache-hit }}" = "true" ]; then
            echo "  ⚡ 路径B: SDK恢复成功 → 跳过SDK初始化，仅初始化AVD"
          elif [ "${{ steps.restore-avd-cache.outputs.cache-hit }}" = "true" ]; then
            echo "  🔧 路径C: AVD恢复成功 → 跳过AVD初始化，仅初始化SDK"
          else
            echo "  📥 路径D: 全新初始化 → 完整的SDK和AVD安装配置"
          fi
          echo ""
          echo "📋 详细状态值:"
          echo "  SDK恢复状态: ${{ steps.restore-sdk-cache.outputs.cache-hit }}"
          echo "  AVD恢复状态: ${{ steps.restore-avd-cache.outputs.cache-hit }}"

      # ============================================
      # 阶段2: 环境设置 (基于缓存状态优化)
      # ============================================

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # ============================================
      # 阶段2: 依赖下载和环境配置
      # ============================================

      - name: Pre-download dependencies
        timeout-minutes: 5
        run: |
          echo "📥 下载项目依赖..."
          echo "💾 系统资源: $(free -h | grep '^Mem:' | awk '{print $2}') 内存 | $(nproc) CPU核心"
          ./gradlew dependencies --stacktrace --no-daemon
          echo "✅ 依赖下载完成"

      - name: Setup Android Environment
        run: |
          echo "🚀 配置 Android 运行环境..."
          
          # 启用 KVM 硬件加速
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules > /dev/null
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
          # 检查 KVM 支持
          if [ -r /dev/kvm ]; then
            echo "✅ KVM 硬件加速已启用"
          else
            echo "⚠️ KVM 硬件加速不可用，将使用软件模拟"
          fi
          
          # 设置图形环境
          echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
          echo "DISPLAY=:99" >> $GITHUB_ENV
          
          echo "✅ Android 环境配置完成"

      # ============================================
      # 阶段3: AVD环境准备 (基于缓存状态)
      # ============================================

      - name: Prepare AVD Environment
        timeout-minutes: 6
        run: |
          echo "🔧 准备 AVD 环境..."
          echo "🔍 AVD缓存状态: ${{ steps.restore-avd-cache.outputs.cache-hit }}"
          
          # 基于缓存状态决定执行策略
          if [ "${{ steps.restore-avd-cache.outputs.cache-hit }}" = "true" ]; then
            echo "⚡ AVD缓存命中，验证现有配置..."
            AVD_NAME="test-api${{ env.API_LEVEL }}"
            
            if [ -f "$HOME/.android/avd/${AVD_NAME}.avd/config.ini" ]; then
              echo "✅ AVD配置文件存在"
              AVD_SIZE=$(du -sh "$HOME/.android/avd" 2>/dev/null | cut -f1 || echo "unknown")
              echo "💾 AVD缓存大小: $AVD_SIZE"
              
              # 验证AVD可用性
              if avdmanager list avd | grep -q "$AVD_NAME"; then
                echo "✅ AVD缓存验证成功: $AVD_NAME"
                echo "🚀 跳过AVD创建，直接使用缓存"
              else
                echo "⚠️ AVD缓存损坏，重新创建..."
                echo "false" > /tmp/cache_valid
              fi
            else
              echo "⚠️ AVD配置文件缺失，重新创建..."
              echo "false" > /tmp/cache_valid
            fi
          else
            echo "📥 AVD缓存未命中，开始创建..."
            echo "false" > /tmp/cache_valid
          fi
          
          # 如果缓存无效或未命中，执行完整创建流程
          if [ ! -f /tmp/cache_valid ] || [ "$(cat /tmp/cache_valid 2>/dev/null)" = "false" ]; then
            echo "🔨 执行完整AVD创建流程..."
            
            # 检查并安装必要的system-images
            SYSTEM_IMAGE="system-images;android-${{ env.API_LEVEL }};default;x86_64"
            echo "📦 检查系统镜像: $SYSTEM_IMAGE"
            
            if ! sdkmanager --list_installed | grep -q "$SYSTEM_IMAGE"; then
              echo "📥 下载系统镜像..."
              echo "y" | sdkmanager "$SYSTEM_IMAGE"
            else
              echo "✅ 系统镜像已存在"
            fi
            
            # 创建AVD
            AVD_NAME="test-api${{ env.API_LEVEL }}"
            echo "📱 创建AVD: $AVD_NAME"
            echo "no" | avdmanager create avd \
              --force \
              --name "$AVD_NAME" \
              --abi "default/x86_64" \
              --package "$SYSTEM_IMAGE" \
              --device "Nexus 6"
            
            # 优化AVD配置
            AVD_CONFIG="$HOME/.android/avd/${AVD_NAME}.avd/config.ini"
            if [ -f "$AVD_CONFIG" ]; then
              echo "⚙️ 应用性能优化配置..."
              echo "hw.cpu.ncore=2" >> "$AVD_CONFIG"
              echo "hw.ramSize=2048" >> "$AVD_CONFIG"
              echo "hw.gpu.enabled=yes" >> "$AVD_CONFIG"
              echo "hw.gpu.mode=swiftshader_indirect" >> "$AVD_CONFIG"
              echo "✅ AVD性能优化完成"
            fi
          fi
          
          # 最终验证
          echo "🔍 最终AVD验证:"
          AVD_NAME="test-api${{ env.API_LEVEL }}"
          if avdmanager list avd | grep -q "$AVD_NAME"; then
            echo "✅ AVD准备完成: $AVD_NAME"
          else
            echo "❌ AVD验证失败"
            exit 1
          fi



      # ============================================
      # 阶段4: APK 构建
      # ============================================

      - name: Build APK
        timeout-minutes: 10
        run: |
          echo "🔨 构建 APK..."
          
          BUILD_START_TIME=$(date +%s)
          
          # 构建环境检查
          echo "🔍 构建环境:"
          echo "  内存可用: $(free -h | grep '^Mem:' | awk '{print $4}')"
          echo "  磁盘可用: $(df -h . | tail -1 | awk '{print $4}')"
          echo "  Java版本: $(java -version 2>&1 | head -1)"
          
          # 清理构建环境
          echo "🧹 清理构建环境..."
          ./gradlew clean --stacktrace
          
          # 执行构建
          echo "🔨 开始APK构建..."
          if ./gradlew assembleFossDebug --stacktrace; then
            BUILD_END_TIME=$(date +%s)
            BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
            echo "✅ APK构建成功 (${BUILD_DURATION}秒)"
            
            # 验证固定的APK文件
            APK_PATH="app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk"
            echo "🔍 验证APK文件: $APK_PATH"
            
            if [ -f "$APK_PATH" ]; then
              APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
              echo "✅ APK构建成功: $APK_PATH ($APK_SIZE)"
            else
              echo "❌ 预期APK文件未找到: $APK_PATH"
              echo "🔍 检查构建输出:"
              find app/build/outputs/apk -name "*.apk" 2>/dev/null | head -5 || echo "未找到任何APK文件"
              ls -la app/build/outputs/apk/foss/debug/ 2>/dev/null || echo "debug目录不存在"
              exit 1
            fi
          else
            echo "❌ APK构建失败"
            exit 1
          fi

      # ============================================
      # 阶段3: 模拟器测试 + 截图
      # ============================================

      - name: Android Emulator Testing with Screenshots
        timeout-minutes: 15
        continue-on-error: false  # 主测试步骤必须成功
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API_LEVEL }}
          target: ${{ env.TARGET }}
          arch: ${{ env.ARCH }}
          profile: ${{ env.PROFILE }}
          avd-name: test-api${{ env.API_LEVEL }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none
          disable-animations: true
          disable-spellchecker: true
          disable-linux-hw-accel: false
          script: |
            set -e  # 启用错误退出模式
            echo "🚀 Android模拟器测试开始"
            
            # 检查APK文件 - 使用固定路径
            echo "🔍 检查APK文件: app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk"
            if [ ! -f "app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk" ]; then
              echo "❌ APK文件不存在"
              echo "📁 搜索可用的APK文件:"
              find . -name "*.apk" -type f 2>/dev/null | head -5
              echo "📁 检查构建输出目录:"
              ls -la app/build/outputs/apk/foss/debug/ 2>/dev/null || echo "构建输出目录不存在"
              exit 1
            fi
            
            APK_SIZE=$(du -h "app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk" | cut -f1)
            echo "✅ APK文件检查通过: $APK_SIZE"
            
            # 检查设备连接
            echo "📱 检查设备连接"
            adb devices
            adb wait-for-device
            
            # 验证设备可用性
            echo "🔍 验证设备状态"
            DEVICE_COUNT=$(adb devices | grep -c "device$" || echo "0")
            if [ "$DEVICE_COUNT" -eq 0 ]; then
              echo "❌ 没有可用的设备"
              echo "📱 设备列表:"
              adb devices
              exit 1
            fi
            echo "✅ 找到 $DEVICE_COUNT 个可用设备"
            
            # 安装APK - 使用固定路径
            echo "📲 安装APK: app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk"
            if adb install -r app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk; then
              echo "✅ APK安装成功"
            else
              echo "❌ APK安装失败，尝试其他方法"
              echo "🔄 卸载旧版本后重新安装"
              adb uninstall org.fossify.calendar 2>/dev/null || echo "没有旧版本需要卸载"
              if adb install app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk; then
                echo "✅ 重新安装成功"
              else
                echo "❌ 安装彻底失败"
                exit 1
              fi
            fi
            
            # 验证安装
            echo "🔍 验证应用安装"
            if adb shell pm list packages | grep -q "org.fossify.calendar"; then
              echo "✅ 应用安装验证成功"
            else
              echo "❌ 应用安装验证失败"
              exit 1
            fi
            
            # 等待和截图
            echo "⏳ 等待系统稳定"
            sleep 5
            
            echo "📸 获取系统截图"
            if adb shell screencap -p /sdcard/screenshot.png; then
              echo "✅ 截图创建成功"
              if adb pull /sdcard/screenshot.png calendar_running_screenshot.png; then
                echo "✅ 截图下载成功"
              else
                echo "⚠️ 截图下载失败"
              fi
            else
              echo "⚠️ 截图创建失败"
            fi
            
            echo "✅ 测试流程完成"

      # ============================================
      # 阶段6: 结果总结和清理
      # ============================================

      - name: Test Summary
        if: always()
        run: |
          echo "🎯 Android CI/CD 精简流程总结:"
          echo ""
          echo "📊 三阶段执行状态:"
          echo "  1️⃣ 环境准备+缓存: ${{ job.status == 'success' && '✅' || '需检查' }}"
          echo "  2️⃣ APK构建: ${{ job.status == 'success' && '✅' || '需检查' }}"
          echo "  3️⃣ 模拟器测试+截图: ${{ job.status == 'success' && '✅' || '需检查' }}"
          echo ""
          echo "🎯 核心功能实现:"
          echo "  📦 APK构建: kalendar-app-foss-debug.apk"
          echo "  🚀 模拟器启动: Android ${{ env.API_LEVEL }}"
          echo "  📲 应用安装: org.fossify.calendar"
          echo "  📸 运行截图: calendar_running_screenshot.png"
          echo ""
          echo "⚡ 性能优化 (v3.0精简版):"
          echo "  🗑️ 移除复杂预检查和快照逻辑"
          echo "  🎯 专注核心目标: 构建→安装→运行→截图"
          echo "  💾 保留有效缓存: SDK和AVD配置"
          echo "  📸 新增截图功能: 验证应用运行状态"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo ""
            echo "🎉 测试完成，截图已生成！"
          fi

      # ============================================
      # 缓存保存：为下次运行建立缓存
      # ============================================

      - name: Save Android SDK Cache
        if: steps.restore-sdk-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/.android/sdk
          key: ${{ runner.os }}-android-sdk-${{ env.API_LEVEL }}-v11

      - name: Save AVD Cache
        if: steps.restore-avd-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/.android/avd
          key: ${{ runner.os }}-avd-${{ env.API_LEVEL }}-nexus6-v11

      - name: Cache Save Summary
        if: always()
        run: |
          echo "💾 缓存保存总结:"
          echo ""
          echo "📊 保存状态:"
          echo "  📱 SDK缓存: ${{ steps.restore-sdk-cache.outputs.cache-hit != 'true' && '💾 已保存新缓存' || '⚡ 跳过(已存在)' }}"
          echo "  🎮 AVD缓存: ${{ steps.restore-avd-cache.outputs.cache-hit != 'true' && '💾 已保存新缓存' || '⚡ 跳过(已存在)' }}"
          echo ""
          echo "🚀 下次运行预期:"
          if [ "${{ steps.restore-sdk-cache.outputs.cache-hit }}" != "true" ] && [ "${{ steps.restore-avd-cache.outputs.cache-hit }}" != "true" ]; then
            echo "  🎯 双缓存建立 → 下次运行将显著加速"
          elif [ "${{ steps.restore-sdk-cache.outputs.cache-hit }}" != "true" ]; then
            echo "  📱 SDK缓存建立 → 下次跳过SDK下载"
          elif [ "${{ steps.restore-avd-cache.outputs.cache-hit }}" != "true" ]; then
            echo "  🎮 AVD缓存建立 → 下次跳过AVD配置"
          else
            echo "  ✅ 缓存已完整 → 性能已优化"
          fi

      - name: Upload Test Results and Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-test-results-${{ github.run_number }}
          path: |
            app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk
            calendar_running_screenshot.png
            build/reports/**/*
            app/build/reports/**/*
          retention-days: 7
