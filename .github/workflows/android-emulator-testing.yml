name: Android Emulator Testing

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Target branch to test'
        required: false
        default: 'main'

env:
  API_LEVEL: 34
  TARGET: default
  ARCH: x86_64
  PROFILE: Nexus 6

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  emulator-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      # 优化 Gradle 性能 - ubuntu-latest 4核心/16GB 内存配置
      GRADLE_OPTS: -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Dorg.gradle.configureondemand=true -Dorg.gradle.caching=true -Dkotlin.incremental=true -Dkotlin.incremental.android=true -Dkotlin.compiler.execution.strategy=in-process -Dorg.gradle.jvmargs="-Xmx4g -XX:+UseG1GC -XX:MaxGCPauseMillis=100"
      # Android 相关环境变量 - 最新配置
      ANDROID_COMPILE_SDK: 34
      ANDROID_BUILD_TOOLS: 34.0.0
      ANDROID_SDK_TOOLS: 9477386
      ANDROID_HOME: /usr/local/lib/android/sdk
      NDK_HOME: /usr/local/lib/android/sdk/ndk/25.1.8937393

    steps:
      # ============================================
      # 🚀 精简流程：构建APK → 启动模拟器 → 安装运行 → 截图
      # 🔄 每次都重新创建，确保环境一致性
      # ============================================
      
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Setup Environment
        run: |
          echo "🚀 配置构建和模拟器环境..."
          
          # 启用 KVM 硬件加速
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules > /dev/null
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
          # 设置图形环境
          echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
          echo "DISPLAY=:99" >> $GITHUB_ENV
          
          echo "✅ KVM: $( [ -r /dev/kvm ] && echo '已启用' || echo '软件模拟' )"

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Gradle & Android SDK
        run: |
          chmod +x gradlew

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Gradle Cache
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false

      - name: Setup AVD
        timeout-minutes: 6
        run: |
          echo "🔨 创建 AVD..."
          AVD_NAME="test-api${{ env.API_LEVEL }}"
          
          # 安装系统镜像并创建AVD
          SYSTEM_IMAGE="system-images;android-${{ env.API_LEVEL }};default;x86_64"
          echo "y" | sdkmanager "$SYSTEM_IMAGE"
          echo "no" | avdmanager create avd --force --name "$AVD_NAME" \
            --abi "default/x86_64" --package "$SYSTEM_IMAGE" --device "Nexus 6"
          
          # 查找 config.ini 文件位置
          echo "🔍 查找 config.ini 文件位置..."
          echo "预期位置: $HOME/.android/avd/${AVD_NAME}.avd/config.ini"
          echo "AVD 目录结构:"
          ls -la "$HOME/.android/avd/" 2>/dev/null || echo "AVD 目录不存在"
          if [ -d "$HOME/.android/avd/${AVD_NAME}.avd" ]; then
            echo "AVD 配置目录内容:"
            ls -la "$HOME/.android/avd/${AVD_NAME}.avd/"
          fi
          echo "全局查找 config.ini 文件:"
          find "$HOME/.android" -name "config.ini" 2>/dev/null || echo "未找到 config.ini 文件"
          
          # 优化配置
          AVD_CONFIG="$HOME/.android/avd/${AVD_NAME}.avd/config.ini"
          echo "hw.cpu.ncore=2" >> "$AVD_CONFIG"
          echo "hw.ramSize=2048" >> "$AVD_CONFIG"
          echo "hw.gpu.enabled=yes" >> "$AVD_CONFIG"
          echo "hw.gpu.mode=swiftshader_indirect" >> "$AVD_CONFIG"
          echo "✅ AVD 创建完成: $AVD_NAME"

      - name: Build APK
        timeout-minutes: 10
        run: |
          echo "🔨 构建 APK..."
          APK_PATH="app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk"
          
          # 清理并构建
          ./gradlew clean assembleFossDebug --stacktrace --no-daemon
          
          # 验证APK
          if [ -f "$APK_PATH" ]; then
            APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
            echo "✅ APK构建成功: $APK_SIZE"
          else
            echo "❌ APK构建失败"
            exit 1
          fi

      - name: 启动模拟器并测试应用
        timeout-minutes: 15
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API_LEVEL }}
          target: ${{ env.TARGET }}
          arch: ${{ env.ARCH }}
          profile: ${{ env.PROFILE }}
          avd-name: test-api${{ env.API_LEVEL }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none
          disable-animations: true
          disable-spellchecker: true
          disable-linux-hw-accel: false
          script: |
            echo "📲 安装并运行应用..."
            adb uninstall org.fossify.calendar.debug || true
            adb install -r app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk
            adb shell pm list packages | grep org.fossify.calendar.debug
            sleep 5
            echo "📸 截图..."
            adb shell screencap -p /sdcard/screenshot.png
            adb pull /sdcard/screenshot.png calendar_running_screenshot.png
            echo "✅ 测试完成"

      - name: 上传测试结果
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-test-results-${{ github.run_number }}
          path: |
            app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk
            calendar_running_screenshot.png
          retention-days: 7
