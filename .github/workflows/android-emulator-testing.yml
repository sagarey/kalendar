name: Android Emulator Testing

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Target branch to test'
        required: false
        default: 'main'

env:
  API_LEVEL: 34
  TARGET: default
  ARCH: x86_64
  PROFILE: pixel_3a

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  emulator-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      # 简化的 Gradle 配置 - 稳定为主
      GRADLE_OPTS: -Xmx6g -XX:+UseG1GC
      # Android 相关环境变量
      ANDROID_BUILD_TOOLS: 34.0.0
      ANDROID_HOME: /usr/local/lib/android/sdk
      ANDROID_AVD_HOME: /home/runner/.android/avd
      # AVD性能优化环境变量
      AVD_CPU_CORES: 2
      AVD_RAM_SIZE: 4096
      AVD_HEAP_SIZE: 256
      AVD_STORAGE_SIZE: 4096MB

    steps:
      # ============================================
      # 阶段1: 代码获取
      # ============================================
      
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}
          fetch-depth: 1

      # ============================================
      # 阶段2: 基础环境设置
      # ============================================

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
        
      - name: Setup Gradle Permissions
        run: |
          chmod +x gradlew
        
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false

      # ============================================
      # 阶段3: Android SDK 设置
      # ============================================

      - name: Setup Android Environment
        run: |
          echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
          echo "DISPLAY=:99" >> $GITHUB_ENV
          
          # 检查系统资源和KVM加速支持
          echo "📊 系统资源信息:"
          echo "CPU核心数: $(nproc)"
          echo "内存总量: $(free -h | grep '^Mem' | awk '{print $2}')"
          echo "可用内存: $(free -h | grep '^Mem' | awk '{print $7}')"
          echo "磁盘空间: $(df -h / | tail -1 | awk '{print $4}')"
          
          echo "🚀 检查KVM加速支持..."
          if [ -e /dev/kvm ]; then
            echo "✅ KVM加速可用"
            sudo chown runner:runner /dev/kvm
          else
            echo "⚠️ KVM加速不可用，使用软件模拟"
          fi

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: tools platform-tools platforms;android-${{ env.API_LEVEL }} build-tools;${{ env.ANDROID_BUILD_TOOLS }} system-images;android-${{ env.API_LEVEL }};${{ env.TARGET }};${{ env.ARCH }} emulator

      - name: Create AVD
        run: |
          echo "🔍 检查可用的系统镜像..."
          sdkmanager --list_installed | grep "system-images" || echo "未找到已安装的系统镜像"
          
          SYSTEM_IMAGE="system-images;android-${{ env.API_LEVEL }};${{ env.TARGET }};${{ env.ARCH }}"
          AVD_NAME="test-api${{ env.API_LEVEL }}"
          
          echo "📱 创建AVD: $AVD_NAME"
          echo "📦 使用系统镜像: $SYSTEM_IMAGE"
          
          # 创建AVD
          echo "no" | avdmanager create avd \
            --force \
            --name "$AVD_NAME" \
            --abi "${{ env.TARGET }}/${{ env.ARCH }}" \
            --package "$SYSTEM_IMAGE" \
            --device "${{ env.PROFILE }}" || {
            echo "❌ AVD创建失败，尝试使用备选配置..."
            echo "📋 可用设备列表:"
            avdmanager list device || echo "无法获取设备列表"
            echo "📋 可用系统镜像:"
            avdmanager list target || echo "无法获取目标列表"
            exit 1
          }
          
          echo "✅ AVD创建完成，检查生成的文件..."
          
          # 检查AVD目录和文件
          echo "📁 AVD目录内容:"
          ls -la "$ANDROID_AVD_HOME/" || echo "无法访问AVD目录"
          
          # 等待配置文件生成
          sleep 2
          
          # 查找实际的配置文件路径
          AVD_CONFIG="$ANDROID_AVD_HOME/${AVD_NAME}.avd/config.ini"
          echo "🔍 查找配置文件: $AVD_CONFIG"
          
          if [ -f "$AVD_CONFIG" ]; then
            echo "✅ 找到配置文件，开始优化..."
            echo "⚙️ 使用环境变量优化AVD性能配置..."
            echo "hw.cpu.ncore=$AVD_CPU_CORES" >> "$AVD_CONFIG"
            echo "hw.ramSize=$AVD_RAM_SIZE" >> "$AVD_CONFIG"
            echo "hw.gpu.enabled=yes" >> "$AVD_CONFIG"
            echo "hw.gpu.mode=swiftshader_indirect" >> "$AVD_CONFIG"
            echo "hw.keyboard=yes" >> "$AVD_CONFIG"
            echo "disk.dataPartition.size=$AVD_STORAGE_SIZE" >> "$AVD_CONFIG"
            echo "vm.heapSize=$AVD_HEAP_SIZE" >> "$AVD_CONFIG"
            echo "✅ AVD配置完成: ${AVD_CPU_CORES}核心, ${AVD_RAM_SIZE}MB内存"
          else
            echo "⚠️ 配置文件未在预期位置找到，尝试其他位置..."
            echo "🔍 搜索所有可能的配置文件位置:"
            find "$ANDROID_AVD_HOME" -name "config.ini" 2>/dev/null || echo "未找到任何config.ini文件"
            find "$HOME/.android" -name "config.ini" 2>/dev/null || echo "在.android目录未找到config.ini"
            
            # 列出创建的AVD
            echo "📋 已创建的AVD列表:"
            avdmanager list avd || echo "无法获取AVD列表"
            
            echo "⚠️ 跳过AVD性能优化，使用默认配置"
          fi

      # ============================================
      # 阶段4: APK 构建性能优化
      # ============================================

      - name: Build APK
        timeout-minutes: 15
        run: |
          echo "🚀 开始APK构建..."
          echo "📋 Gradle版本信息:"
          ./gradlew --version
          
          echo "🔧 开始清理和构建..."
          ./gradlew clean
          ./gradlew assembleFossDebug --stacktrace --info

      # ============================================
      # 阶段5: 模拟器测试 + 截图
      # ============================================

      - name: Android Emulator Testing with Screenshots
        timeout-minutes: 20
        continue-on-error: false
        uses: reactivecircus/android-emulator-runner@v2
        env:
          ANDROID_AVD_HOME: ${{ env.ANDROID_AVD_HOME }}
        with:
          api-level: ${{ env.API_LEVEL }}
          target: ${{ env.TARGET }}
          arch: ${{ env.ARCH }}
          profile: ${{ env.PROFILE }}
          avd-name: test-api${{ env.API_LEVEL }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -memory ${{ env.AVD_RAM_SIZE }} -cores ${{ env.AVD_CPU_CORES }} -accel on
          disable-animations: true
          disable-spellchecker: true
          disable-linux-hw-accel: false
          emulator-build: 7425822
          script: adb uninstall org.fossify.calendar.debug || true && adb install -r app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk && adb shell pm list packages | grep org.fossify.calendar.debug && sleep 8 && adb shell screencap -p /sdcard/screenshot.png && adb pull /sdcard/screenshot.png calendar_running_screenshot.png

      - name: Upload APK and Screenshot
        uses: actions/upload-artifact@v4
        with:
          name: android-test-results-${{ github.run_number }}
          path: |
            app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk
            calendar_running_screenshot.png
          retention-days: 3
