name: Android Emulator Testing

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Target branch to test'
        required: false
        default: 'main'

env:
  API_LEVEL: 34
  TARGET: default
  ARCH: x86_64
  PROFILE: Nexus 6

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  emulator-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      # 优化 Gradle 性能 - ubuntu-latest 4核心配置
      GRADLE_OPTS: -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Dorg.gradle.configureondemand=true -Dorg.gradle.caching=true -Dkotlin.incremental=true -Dkotlin.incremental.android=true -Dkotlin.compiler.execution.strategy=in-process -Dorg.gradle.jvmargs="-Xmx4g -XX:+UseG1GC -XX:MaxGCPauseMillis=100"
      # Android 相关环境变量 - 最新配置
      ANDROID_COMPILE_SDK: 34
      ANDROID_BUILD_TOOLS: 34.0.0
      ANDROID_SDK_TOOLS: 9477386
      ANDROID_HOME: /usr/local/lib/android/sdk
      NDK_HOME: /usr/local/lib/android/sdk/ndk/25.1.8937393

    steps:
      # ============================================
      # 阶段1: 代码获取和缓存预检
      # ============================================
      
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      # ============================================
      # 缓存恢复
      # ============================================

      - name: Restore SDK Cache
        id: restore-sdk-cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.ANDROID_HOME }}
          key: ${{ runner.os }}-sdk-${{ env.API_LEVEL }}-v11

      - name: Restore AVD Cache
        id: restore-avd-cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.android/avd
          key: ${{ runner.os }}-avd-${{ env.API_LEVEL }}-nexus6-v11

      # ============================================
      # 阶段2: 基础环境设置
      # ============================================

      - name: Setup Java & Gradle
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
        
      - name: Setup Gradle Cache & Permissions
        run: |
          chmod +x gradlew
        
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false

      # ============================================
      # 阶段3: Android SDK 设置 (基于缓存优化)
      # ============================================

      - name: Setup SDK
        if: steps.restore-sdk-cache.outputs.cache-hit != 'true'
        uses: android-actions/setup-android@v3
        with:
          packages: |
            platform-tools
            platforms;android-${{ env.API_LEVEL }}
            build-tools;${{ env.ANDROID_BUILD_TOOLS }}

      - name: Save SDK Cache
        if: steps.restore-sdk-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.ANDROID_HOME }}
          key: ${{ runner.os }}-sdk-${{ env.API_LEVEL }}-v11

      # ============================================
      # 阶段4: Android环境配置与AVD设置
      # ============================================

      - name: Setup AVD
        timeout-minutes: 6
        run: |
          echo "🔧 配置Android环境与AVD..."
          
          # 设置Android环境变量 (总是执行)
          echo "📱 设置Android环境变量..."
          echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
          echo "DISPLAY=:99" >> $GITHUB_ENV
          echo "✅ 环境变量设置完成"
          
          # 检查AVD缓存状态并按需创建
          if [ "${{ steps.restore-avd-cache.outputs.cache-hit }}" != "true" ]; then
            echo "🔨 AVD缓存未命中，开始创建AVD..."
            
            # 检查并安装必要的system-images
            SYSTEM_IMAGE="system-images;android-${{ env.API_LEVEL }};default;x86_64"
            echo "📦 检查系统镜像: $SYSTEM_IMAGE"
            
            if ! sdkmanager --list_installed | grep -q "$SYSTEM_IMAGE"; then
              echo "📥 下载系统镜像..."
              echo "y" | sdkmanager "$SYSTEM_IMAGE"
            else
              echo "✅ 系统镜像已存在"
            fi
            
            # 创建AVD
            AVD_NAME="test-api${{ env.API_LEVEL }}"
            echo "📱 创建AVD: $AVD_NAME"
            echo "no" | avdmanager create avd \
              --force \
              --name "$AVD_NAME" \
              --abi "default/x86_64" \
              --package "$SYSTEM_IMAGE" \
              --device "Nexus 6"
            
            # 优化AVD配置
            AVD_CONFIG="$HOME/.android/avd/${AVD_NAME}.avd/config.ini"
            if [ -f "$AVD_CONFIG" ]; then
              echo "⚙️ 应用性能优化配置..."
              echo "hw.cpu.ncore=2" >> "$AVD_CONFIG"
              echo "hw.ramSize=2048" >> "$AVD_CONFIG"
              echo "hw.gpu.enabled=yes" >> "$AVD_CONFIG"
              echo "hw.gpu.mode=swiftshader_indirect" >> "$AVD_CONFIG"
              echo "✅ AVD性能优化完成"
            fi
            
            echo "✅ AVD创建完成: $AVD_NAME"
          else
            echo "⚡ AVD缓存命中，跳过AVD创建"
            AVD_NAME="test-api${{ env.API_LEVEL }}"
            echo "✅ 使用缓存的AVD: $AVD_NAME"
          fi

      - name: Save AVD Cache
        if: steps.restore-avd-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/.android/avd
          key: ${{ runner.os }}-avd-${{ env.API_LEVEL }}-nexus6-v11

      # ============================================
      # 阶段5: APK 构建 (包含依赖下载)
      # ============================================

      - name: Build APK
        timeout-minutes: 10
        run: |
          echo "🔨 构建 APK (包含依赖下载)..."
          
          BUILD_START_TIME=$(date +%s)
          
          # 下载依赖并构建
          echo "📥 下载依赖并清理构建环境..."
          ./gradlew dependencies clean --stacktrace --no-daemon
          
          # 清理可能残留的APK文件
          rm -f app/build/outputs/apk/foss/debug/*.apk 2>/dev/null || true
          
          # 执行构建
          echo "🔨 开始APK构建..."
          if ./gradlew assembleFossDebug --stacktrace; then
            BUILD_END_TIME=$(date +%s)
            BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
            echo "✅ APK构建成功 (${BUILD_DURATION}秒)"
            
            # 验证APK文件
            APK_PATH="app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk"
            if [ -f "$APK_PATH" ]; then
              APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
              echo "✅ APK构建成功: $APK_PATH ($APK_SIZE)"
            else
              echo "❌ APK文件未找到: $APK_PATH"
              find app/build/outputs/apk -name "*.apk" 2>/dev/null | head -3 || echo "未找到任何APK文件"
              exit 1
            fi
          else
            echo "❌ APK构建失败"
            exit 1
          fi

      # ============================================
      # 阶段6: 模拟器测试 + 截图
      # ============================================

      - name: Android Emulator Testing with Screenshots
        timeout-minutes: 15
        continue-on-error: false  # 主测试步骤必须成功
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API_LEVEL }}
          target: ${{ env.TARGET }}
          arch: ${{ env.ARCH }}
          profile: ${{ env.PROFILE }}
          avd-name: test-api${{ env.API_LEVEL }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none
          disable-animations: true
          disable-spellchecker: true
          disable-linux-hw-accel: false
          script: adb uninstall org.fossify.calendar.debug || true && adb install -r app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk && adb shell pm list packages | grep org.fossify.calendar.debug && sleep 5 && adb shell screencap -p /sdcard/screenshot.png && adb pull /sdcard/screenshot.png calendar_running_screenshot.png

      # ============================================
      # 结果上传
      # ============================================

      - name: Upload Test Results and Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-test-results-${{ github.run_number }}
          path: |
            app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk
            calendar_running_screenshot.png
            build/reports/**/*
            app/build/reports/**/*
          retention-days: 7
