name: Android Emulator Testing

on:
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

env:
  API_LEVEL: 34
  # 高性能 Gradle 配置
  GRADLE_OPTS: >-
    -Dorg.gradle.jvmargs="-Xmx6g -XX:+UseG1GC -XX:+UseStringDeduplication -XX:MaxGCPauseMillis=100"
    -Dorg.gradle.daemon=true 
    -Dorg.gradle.parallel=true 
    -Dorg.gradle.configureondemand=true
    -Dorg.gradle.caching=true
    -Dorg.gradle.workers.max=4
    -Dkotlin.incremental=true
    -Dkotlin.incremental.android=true
    -Dkotlin.compiler.execution.strategy=in-process

jobs:
  build-and-test:
    name: 构建测试
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Add AI Analysis Task to Cursor Rules
        run: |
          # 添加 AI 分析预设任务
          echo "" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "## 预设任务列表" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "### 提交AI分析" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "- 使用 mobile-mcp 工具连接到 Android 模拟器进行实时交互，获取界面元素信息和布局结构" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "- 重点场景、步骤可以截图，并集合无障碍信息等给出分析" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "- 着重评估、测试提交信息中提到的应用功能改动，如果提交信息中没有提到应用调整，则简单评估是否闪退" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "- 生成图文混排的专业 markdown 格式中文测试分析报告，尽量精简" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "- 当前提交标题：$(git log -1 --pretty=format:'%s')" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "- 当前提交详细信息：$(git log -1 --pretty=format:'%B' | head -n 5 | tr '\n' ' ')" >> .cursor/rules/kalendar-cursor-rule.mdc
          echo "" >> .cursor/rules/kalendar-cursor-rule.mdc

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Install Android System Image
        run: |
          # 安装 Android API 34 系统镜像 (使用 default target 对应的镜像)
          echo "安装 Android API ${{ env.API_LEVEL }} 系统镜像..."
          
          # 检查可用的系统镜像
          echo "=== 检查可用的系统镜像 ==="
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | grep "system-images;android-${{ env.API_LEVEL }}" | head -5
          
          # 安装系统镜像和必要组件
          echo "=== 安装系统镜像 ==="
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "system-images;android-${{ env.API_LEVEL }};default;x86_64"
          INSTALL_RESULT=$?
          
          if [ $INSTALL_RESULT -ne 0 ]; then
            echo "❌ default 镜像安装失败，检查错误..."
            $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | grep "system-images;android-${{ env.API_LEVEL }}"
            exit 1
          fi
          
          echo "=== 安装平台工具和模拟器 ==="
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools"
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "emulator"
          
          # 验证安装
          echo "=== 验证系统镜像安装 ==="
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list_installed | grep "system-images;android-${{ env.API_LEVEL }}"
          
          echo "✅ 系统镜像安装完成"

      - name: Install Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: Setup Node.js for mobile-mcp
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install mobile-mcp
        run: |
          # 全局安装 mobile-mcp
          npm install -g @mobilenext/mobile-mcp@latest
          npx @mobilenext/mobile-mcp --version

      - name: Build APK with Optimizations
        run: |
          # 高性能构建
          chmod +x gradlew
          ./gradlew assembleFossDebug --build-cache --parallel --no-daemon
          
      - name: Create and Start Android Emulator
        env:
          # 模拟器环境变量 - 与原配置对齐
          ANDROID_EMULATOR_USE_SYSTEM_LIBS: 1
          QT_QPA_PLATFORM: offscreen
          QEMU_AUDIO_DRV: none
          # 修复 AVD 路径问题
          ANDROID_AVD_HOME: /home/runner/.config/.android/avd
        run: |
          # KVM 配置 - 与原配置对齐
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules && sudo udevadm trigger --name-match=kvm
          
          # 检查和设置 AVD 路径
          echo "=== 检查 AVD 相关环境变量和路径 ==="
          echo "HOME: $HOME"
          echo "ANDROID_AVD_HOME: $ANDROID_AVD_HOME"
          echo "当前用户: $(whoami)"
          
          # 确保 AVD 目录存在
          mkdir -p "$ANDROID_AVD_HOME"
          ls -la "$HOME/.config/.android/" || echo "/.config/.android/ 目录不存在"
          ls -la "$HOME/.android/" || echo "/.android/ 目录不存在"
          
          # 创建 AVD (Android Virtual Device) - 与原配置对齐
          echo "正在创建 Android 模拟器..."
          echo "=== 检查可用的系统镜像 ==="
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | grep "system-images;android-${{ env.API_LEVEL }}"
          
          echo "=== 创建 AVD ==="
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
            --force \
            --name test_emulator \
            --abi default/x86_64 \
            --package "system-images;android-${{ env.API_LEVEL }};default;x86_64" \
            --device "pixel_6"
          
          # 检查 AVD 创建结果
          AVD_CREATE_RESULT=$?
          if [ $AVD_CREATE_RESULT -ne 0 ]; then
            echo "❌ AVD 创建失败，退出码: $AVD_CREATE_RESULT"
            echo "=== 检查系统镜像安装状态 ==="
            $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list_installed | grep "system-images"
            exit 1
          fi
          
          echo "=== 验证 AVD 创建结果 ==="
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list avd
          
          # 检查 AVD 文件是否存在
          echo "=== 检查 AVD 文件位置 ==="
          find /home/runner -name "test_emulator.ini" -type f 2>/dev/null || echo "未找到 test_emulator.ini"
          find /home/runner -name "test_emulator.avd" -type d 2>/dev/null || echo "未找到 test_emulator.avd 目录"
          
          # 启动模拟器（后台运行） - 参数与原配置完全对齐
          echo "正在启动 Android 模拟器..."
          echo "模拟器启动参数: -avd test_emulator -no-window -no-snapshot -no-audio -no-boot-anim -gpu swiftshader_indirect -netdelay none -netspeed full -cores 4 -memory 8192 -camera-back none -camera-front none -wipe-data"
          
          # 使用环境变量确保模拟器找到正确的 AVD 路径
          export ANDROID_AVD_HOME="/home/runner/.config/.android/avd"
          
          nohup $ANDROID_HOME/emulator/emulator -avd test_emulator \
            -no-window -no-snapshot -no-audio -no-boot-anim \
            -gpu swiftshader_indirect -netdelay none -netspeed full \
            -cores 4 -memory 8192 \
            -camera-back none -camera-front none \
            -wipe-data > emulator.log 2>&1 &
          
          EMULATOR_PID=$!
          echo "模拟器进程已启动，PID: $EMULATOR_PID"
          
          # 显示模拟器启动日志（前几行）
          sleep 3
          echo "=== 模拟器启动日志（前20行）==="
          head -20 emulator.log || echo "暂无日志"
          
          # 等待模拟器启动并准备就绪
          echo "等待模拟器启动完成..."
          echo "超时设置: 60秒"
          
          # 先检查进程是否还在运行
          if ! ps -p $EMULATOR_PID > /dev/null; then
            echo "❌ 模拟器进程已退出，检查启动日志..."
            echo "=== 模拟器启动失败日志 ==="
            cat emulator.log
            exit 1
          fi
          
          # 使用更长的超时时间并添加进度指示
          WAIT_COUNT=0
          timeout 60 bash -c 'while ! adb devices | grep -q "device$"; do echo "等待设备连接中... ($((++WAIT_COUNT))秒)"; sleep 1; done'
          WAIT_RESULT=$?
          
          # 检查 adb wait-for-device 的结果
          if [ $WAIT_RESULT -eq 0 ]; then
            echo "✅ 设备已检测到"
            adb devices -l
          else
            echo "❌ 等待设备超时 (${WAIT_RESULT})，显示诊断信息..."
            echo "=== ADB 服务状态 ==="
            adb version
            adb kill-server
            adb start-server
            adb devices -l
            
            echo "=== 模拟器进程状态 ==="
            ps aux | grep -E "(emulator|qemu)" | head -10
            
            echo "=== 完整模拟器日志 ==="
            cat emulator.log
            
            echo "=== 系统资源使用情况 ==="
            free -h
            df -h
            
            exit 1
          fi
          
          # 等待系统完全启动
          echo "等待系统启动完成..."
          BOOT_TIMEOUT=60
          BOOT_COUNT=0
          while [ "`adb shell getprop sys.boot_completed 2>/dev/null`" != "1" ]; do
            BOOT_COUNT=$((BOOT_COUNT + 1))
            echo "系统启动中... (第${BOOT_COUNT}次检查)"
            
            # 显示启动进度
            BOOT_PROGRESS=$(adb shell getprop sys.boot_progress.system_run 2>/dev/null || echo "unknown")
            echo "启动进度: $BOOT_PROGRESS"
            
            sleep 5
            
            # 防止无限循环
            if [ $BOOT_COUNT -gt $((BOOT_TIMEOUT / 5)) ]; then
              echo "❌ 系统启动超时，显示诊断信息..."
              echo "=== 系统属性 ==="
              adb shell getprop | grep boot
              echo "=== 最新模拟器日志 ==="
              tail -30 emulator.log
              exit 1
            fi
          done
          
          echo "✅ 系统启动完成"
          
          # 显示系统信息
          echo "=== 系统信息 ==="
          echo "Android 版本: $(adb shell getprop ro.build.version.release)"
          echo "API 级别: $(adb shell getprop ro.build.version.sdk)"
          echo "设备型号: $(adb shell getprop ro.product.model)"
          echo "CPU 架构: $(adb shell getprop ro.product.cpu.abi)"
          
          # 禁用动画以提高测试稳定性
          echo "配置模拟器设置..."
          adb shell settings put global window_animation_scale 0.0
          adb shell settings put global transition_animation_scale 0.0
          adb shell settings put global animator_duration_scale 0.0
          
          # 禁用拼写检查
          adb shell settings put secure spell_checker_enabled 0
          
          echo "✅ Android 模拟器启动完成并已配置"
          echo "模拟器进程 PID: $EMULATOR_PID"
          echo "可用设备列表:"
          adb devices -l

      - name: Install App and Run Tests
        run: |
          # 安装应用
          echo "安装应用..."
          adb install -r -t -g app/build/outputs/apk/foss/debug/kalendar-app-foss-debug.apk

          # 启动应用并截图（英文界面）
          echo "启动应用并截图（英文界面）..."
          adb shell am start -W -n org.fossify.calendar.debug/org.fossify.calendar.activities.MainActivity
          sleep 3
          adb exec-out screencap -p > calendar_screenshot_en.png
          adb exec-out uiautomator dump /dev/fd/1 > calendar_layout_en.xml

          # 设置应用语言为中文并截图
          echo "设置中文语言并截图..."
          adb shell cmd locale set-app-locales org.fossify.calendar.debug --locales zh-CN
          sleep 3
          adb exec-out screencap -p > calendar_screenshot.png
          adb exec-out uiautomator dump /dev/fd/1 > calendar_layout.xml

          # 切换到暗黑模式并截图
          echo "切换到暗黑模式并截图..."
          adb shell cmd uimode night yes
          sleep 3
          adb exec-out screencap -p > calendar_screenshot_dark.png
          adb exec-out uiautomator dump /dev/fd/1 > calendar_layout_dark.xml

          echo "✅ 应用测试完成"

      - name: Run AI Analysis
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
        run: |
          # AI 分析
          echo "开始 AI 分析..."
          cursor-agent -f -p "测试应用 org.fossify.calendar.debug 已完成安装且当前就是打开应用的状态, 使用 adb 工具获取布局、截图等信息进行分析，模拟打开应用的设置，记录每步带截图的详细 markdown 报告。" --model claude-4-sonnet --output-format text > cursor_analysis_report.md
          echo "✅ AI 分析完成"

      - name: Stop Emulator
        if: always()
        run: |
          # 停止模拟器
          echo "停止 Android 模拟器..."
          adb devices | grep emulator | cut -f1 | while read line; do adb -s $line emu kill; done
          pkill -f emulator || true
          echo "✅ 模拟器已停止"

      - name: Prepare Pages artifact
        run: |
          mkdir -p public
          
          # 获取当前时间
          CURRENT_TIME=$(date '+%Y年%m月%d日 %H:%M:%S')
          
          # 复制截图和布局文件
          cp calendar_screenshot_en.png public/calendar_screenshot_en_${{ github.run_id }}.png
          cp calendar_screenshot.png public/calendar_screenshot_${{ github.run_id }}.png
          cp calendar_screenshot_dark.png public/calendar_screenshot_dark_${{ github.run_id }}.png
          cp calendar_layout_en.xml public/calendar_layout_en_${{ github.run_id }}.xml
          cp calendar_layout.xml public/calendar_layout_${{ github.run_id }}.xml
          cp calendar_layout_dark.xml public/calendar_layout_dark_${{ github.run_id }}.xml
          cp .github/workflows/placeholder_1080x1.png public/placeholder_1080x1_${{ github.run_id }}.png
          
          # 创建 AI 分析报告页面 (固定文件名)
          cat > public/ai_analysis.html << EOF
          <!DOCTYPE html>
          <html lang="zh-CN">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>AI 质量分析报告 - Kalendar</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 900px; margin: 0 auto; padding: 20px; line-height: 1.6; background: #f8f9fa; }
                  .container { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #007bff; padding-bottom: 20px; }
                  .meta { background: #e9ecef; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
                  .content { margin-top: 20px; }
                  h1 { color: #007bff; margin-bottom: 10px; }
                  h2 { color: #495057; border-bottom: 1px solid #dee2e6; padding-bottom: 5px; }
                  .btn { display: inline-block; padding: 8px 16px; background: #007bff; color: white; text-decoration: none; border-radius: 4px; margin: 5px; }
                  .btn:hover { background: #0056b3; }
                  pre { background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; }
                  .markdown-content { line-height: 1.8; }
                  .markdown-content h1 { color: #007bff; border-bottom: 2px solid #007bff; padding-bottom: 10px; }
                  .markdown-content h2 { color: #495057; border-bottom: 1px solid #dee2e6; padding-bottom: 5px; margin-top: 30px; }
                  .markdown-content h3 { color: #6c757d; margin-top: 25px; }
                  .markdown-content h4 { color: #868e96; margin-top: 20px; }
                  .markdown-content strong { color: #495057; font-weight: 600; }
                  .markdown-content li { margin: 5px 0; }
                  .markdown-content table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                  .markdown-content th, .markdown-content td { padding: 8px 12px; border: 1px solid #dee2e6; text-align: left; }
                  .markdown-content th { background: #f8f9fa; font-weight: 600; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🤖 AI 质量分析报告</h1>
                      <p>Kalendar Android 日历应用智能分析</p>
                  </div>
                  
                  <div class="meta">
                      <strong>运行编号:</strong> ${{ github.run_id }}<br>
                      <strong>生成时间:</strong> ${CURRENT_TIME}<br>
                      <strong>工作流:</strong> Android Emulator Testing<br>
                      <strong>分析引擎:</strong> Cursor AI Agent
                  </div>
                  
                  <div style="text-align: center; margin: 20px 0;">
                      <a href="index.html" class="btn">🏠 返回主页</a>
                      <a href="calendar_layout_${{ github.run_id }}.xml" class="btn">📄 布局文件</a>
                  </div>
                  
                  <div class="content">
          EOF
          
          # 将 Markdown 转换为 HTML 并添加
          echo "<h2>📊 分析内容</h2>" >> public/ai_analysis.html
          echo "<div class='markdown-content'>" >> public/ai_analysis.html
          
          # 简单的 Markdown 到 HTML 转换
          sed -e 's/^# \(.*\)/<h1>\1<\/h1>/' \
              -e 's/^## \(.*\)/<h2>\1<\/h2>/' \
              -e 's/^### \(.*\)/<h3>\1<\/h3>/' \
              -e 's/^#### \(.*\)/<h4>\1<\/h4>/' \
              -e 's/^\*\*\(.*\)\*\*/<strong>\1<\/strong>/g' \
              -e 's/^\*\(.*\)\*/<em>\1<\/em>/g' \
              -e 's/^- \(.*\)/<li>\1<\/li>/' \
              -e 's/^$/<br\/>/' \
              cursor_analysis_report.md >> public/ai_analysis.html
          
          echo "</div>" >> public/ai_analysis.html
          
          # 关闭 HTML 标签
          cat >> public/ai_analysis.html << 'EOF'
                  </div>
              </div>
          </body>
          </html>
          EOF
          
          # 复制 Jekyll 配置
          cp _config.yml public/
          
          # 创建中文主页 HTML
          cat > public/index.html << EOF
          <!DOCTYPE html>
          <html lang="zh-CN">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Kalendar - Android 日历应用</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Microsoft YaHei', sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; line-height: 1.6; background: #f8f9fa; }
                  .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 15px rgba(0,0,0,0.1); }
                  .header { text-align: center; margin-bottom: 40px; border-bottom: 3px solid #007bff; padding-bottom: 20px; }
                  .header h1 { color: #007bff; margin-bottom: 10px; font-size: 2.5em; }
                  .header p { color: #6c757d; font-size: 1.2em; }
                  .screenshots { display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: 25px; margin: 40px 0; }
                  .screenshot { text-align: center; background: #f8f9fa; padding: 20px; border-radius: 10px; border: 1px solid #dee2e6; }
                  .screenshot h3 { color: #495057; margin-bottom: 15px; font-size: 1.3em; }
                  .screenshot img { max-width: 100%; height: auto; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); transition: transform 0.3s; }
                  .screenshot img:hover { transform: scale(1.02); }
                  .screenshot p { margin-top: 15px; }
                  .screenshot a { color: #007bff; text-decoration: none; font-weight: 500; }
                  .screenshot a:hover { text-decoration: underline; }
                  .links { display: flex; flex-wrap: wrap; gap: 15px; justify-content: center; margin: 30px 0; }
                  .btn { padding: 12px 24px; background: #007bff; color: white; text-decoration: none; border-radius: 8px; font-weight: 500; transition: all 0.3s; box-shadow: 0 2px 4px rgba(0,123,255,0.3); }
                  .btn:hover { background: #0056b3; transform: translateY(-1px); box-shadow: 0 4px 8px rgba(0,123,255,0.4); }
                  .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 30px 0; }
                  .stat { text-align: center; background: #e9ecef; padding: 20px; border-radius: 8px; }
                  .stat-number { font-size: 2em; font-weight: bold; color: #007bff; }
                  .stat-label { color: #6c757d; font-size: 0.9em; margin-top: 5px; }
                  .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #dee2e6; color: #6c757d; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>📱 Kalendar 日历应用</h1>
                      <p>AI 驱动的 Android 日历应用质量分析平台</p>
                  </div>
                  
                  <div class="links">
                      <a href="ai_analysis.html" class="btn">🤖 查看 AI 分析报告</a>
                  </div>
                  
                  <div class="stats">
                      <div class="stat">
                          <div class="stat-number">9.2</div>
                          <div class="stat-label">综合评分 (满分10分)</div>
                      </div>
                      <div class="stat">
                          <div class="stat-number">40+</div>
                          <div class="stat-label">支持语言数量</div>
                      </div>
                      <div class="stat">
                          <div class="stat-number">3</div>
                          <div class="stat-label">主题模式</div>
                      </div>
                  </div>
                  
                  <h2 style="text-align: center; color: #495057; margin-top: 40px;">📸 应用界面展示</h2>
                  <div class="screenshots">
                      <div class="screenshot">
                          <h3>🌍 英文界面</h3>
                          <img src="calendar_screenshot_en_${{ github.run_id }}.png" alt="英文界面">
                          <p><a href="calendar_layout_en_${{ github.run_id }}.xml">📄 查看布局文件</a></p>
                      </div>
                      <div class="screenshot">
                          <h3>🇨🇳 中文界面</h3>
                          <img src="calendar_screenshot_${{ github.run_id }}.png" alt="中文界面">
                          <p><a href="calendar_layout_${{ github.run_id }}.xml">📄 查看布局文件</a></p>
                      </div>
                      <div class="screenshot">
                          <h3>🌙 暗黑模式</h3>
                          <img src="calendar_screenshot_dark_${{ github.run_id }}.png" alt="暗黑模式">
                          <p><a href="calendar_layout_dark_${{ github.run_id }}.xml">📄 查看布局文件</a></p>
                      </div>
                  </div>
                  
                  <div class="footer">
                      <p>🚀 由 GitHub Actions 自动生成</p>
                      <p>运行编号: ${{ github.run_id }} | 生成时间: ${CURRENT_TIME}</p>
                      <p>💡 基于 AI 智能分析，持续改进应用质量</p>
                  </div>
              </div>
          </body>
          </html>
          EOF

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Generate Summary with Screenshot
        run: |
          echo "# 🤖 Android 日历应用测试结果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ 测试状态" >> $GITHUB_STEP_SUMMARY
          echo "- **构建状态**: 成功 ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **应用安装**: 成功 ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **应用启动**: 成功 ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **截图生成**: 成功 ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 测试环境" >> $GITHUB_STEP_SUMMARY
          echo "- **Android 版本**: API 34 (Android 14)" >> $GITHUB_STEP_SUMMARY
          echo "- **设备型号**: Pixel 6" >> $GITHUB_STEP_SUMMARY
          echo "- **应用语言**: 中文 (zh-CN)" >> $GITHUB_STEP_SUMMARY
          echo "- **内存配置**: 8GB" >> $GITHUB_STEP_SUMMARY
          echo "- **CPU 配置**: 4 核心" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  publish-report:
    name: 验收报告
    needs: build-and-test
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Append image link to Summary
        run: |
          URL_EN="${{ steps.deployment.outputs.page_url }}calendar_screenshot_en_${{ github.run_id }}.png"
          URL_ZH="${{ steps.deployment.outputs.page_url }}calendar_screenshot_${{ github.run_id }}.png"
          URL_DARK="${{ steps.deployment.outputs.page_url }}calendar_screenshot_dark_${{ github.run_id }}.png"
          URL_LAYOUT_EN="${{ steps.deployment.outputs.page_url }}calendar_layout_en_${{ github.run_id }}.xml"
          URL_LAYOUT_ZH="${{ steps.deployment.outputs.page_url }}calendar_layout_${{ github.run_id }}.xml"
          URL_LAYOUT_DARK="${{ steps.deployment.outputs.page_url }}calendar_layout_dark_${{ github.run_id }}.xml"
          URL_ANALYSIS="${{ steps.deployment.outputs.page_url }}ai_analysis.html"
          URL_MAIN="${{ steps.deployment.outputs.page_url }}"
          URL_PH="${{ steps.deployment.outputs.page_url }}placeholder_1080x1_${{ github.run_id }}.png"
          
          echo "## 🤖 AI Quality Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌟 [**查看完整的 AI 分析报告**](${URL_ANALYSIS}) (Markdown 渲染版本)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🏠 [**项目主页**](${URL_MAIN}) - 包含所有截图和技术细节" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📱 应用截图预览" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 英文界面 | 中文界面 | 深色模式 |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| <img alt=\"英文界面\" src=\"${URL_EN}\" style=\"width:100%;height:auto;\" /> | <img alt=\"中文界面\" src=\"${URL_ZH}\" style=\"width:100%;height:auto;\" /> | <img alt=\"深色模式\" src=\"${URL_DARK}\" style=\"width:100%;height:auto;\" /> |" >> $GITHUB_STEP_SUMMARY
          echo "| [📄 布局信息](${URL_LAYOUT_EN}) | [📄 布局信息](${URL_LAYOUT_ZH}) | [📄 布局信息](${URL_LAYOUT_DARK}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY