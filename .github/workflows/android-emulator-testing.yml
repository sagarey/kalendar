name: Android Emulator Testing

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      branch:
        description: '要测试的分支名称'
        required: false
        default: 'main'
        type: string

# 优化并发控制，避免重复运行
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  emulator-test:
    runs-on: ubuntu-latest
    timeout-minutes: 35  # 4核心优化后，缩短超时时间
    env:
      # 优化 Gradle 性能 - ubuntu-latest 4核心配置
      GRADLE_OPTS: -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Dorg.gradle.configureondemand=true -Dorg.gradle.caching=true -Dkotlin.incremental=true -Dkotlin.incremental.android=true -Dkotlin.compiler.execution.strategy=in-process -Dorg.gradle.jvmargs="-Xmx4g -XX:+UseG1GC -XX:MaxGCPauseMillis=100"
      # Android 相关环境变量 - 最新配置
      ANDROID_COMPILE_SDK: 34
      ANDROID_BUILD_TOOLS: 34.0.0
      ANDROID_SDK_TOOLS: 9477386
      API_LEVEL: 34
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Pre-download dependencies
        timeout-minutes: 10  # 依赖下载超时控制
        run: |
          echo "📥 下载依赖..."
          echo "💾 内存: $(free -h | grep '^Mem:' | awk '{print $2}') | CPU: $(nproc)核"
          ./gradlew dependencies --stacktrace
          echo "✅ 依赖下载完成"

      - name: Cache Android SDK
        id: cache-android-sdk
        uses: actions/cache@v4
        continue-on-error: true
        with:
          path: |
            ~/.android/sdk
            ~/.android/avd_tmp
          key: ${{ runner.os }}-android-sdk-${{ env.API_LEVEL }}-v2
          restore-keys: |
            ${{ runner.os }}-android-sdk-${{ env.API_LEVEL }}-
            ${{ runner.os }}-android-sdk-
      
      - name: Cache Status Summary
        run: |
          echo "📋 缓存状态汇总:"
          # Android SDK 缓存
          if [ "${{ steps.cache-android-sdk.outputs.cache-hit }}" == "true" ]; then
            echo "  ✅ Android SDK: 缓存命中"
          else
            echo "  📥 Android SDK: 需要下载"
          fi
          
          # 显示缓存键信息
          echo "  🔑 SDK 缓存键: ${{ runner.os }}-android-sdk-${{ env.API_LEVEL }}-v2"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Android Environment
        run: |
          echo "🚀 配置 Android 环境..."
          
          # 启用 KVM 硬件加速
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules > /dev/null
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
          # 检查 KVM 支持
          if [ -r /dev/kvm ]; then
            echo "✅ KVM 加速已启用"
          else
            echo "⚠️ KVM 加速不可用"
          fi
          
          # 启动 ADB 服务
          adb start-server
          
          # 设置图形环境
          echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Cache Android Emulator
        id: cache-emulator
        uses: actions/cache@v4
        continue-on-error: true
        with:
          path: |
            ~/.android/avd
          key: ${{ runner.os }}-emulator-api${{ env.API_LEVEL }}-nexus6-v2
          restore-keys: |
            ${{ runner.os }}-emulator-api${{ env.API_LEVEL }}-
            ${{ runner.os }}-emulator-
      


      - name: Start Android Emulator
        timeout-minutes: 12  # 缩短超时时间，快速失败
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API_LEVEL }}
          target: default  # 使用默认目标，更稳定
          arch: x86_64
          profile: Nexus 6
          avd-name: test-api${{ env.API_LEVEL }}
          force-avd-creation: false  # 尝试复用已有 AVD
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -memory 2048
          disable-animations: true
          disable-spellchecker: true
          disable-linux-hw-accel: false
          working-directory: ./
          script: |
            echo "📱 启动模拟器..."
            
            # 等待模拟器进程启动
            echo "⏳ 等待模拟器进程启动..."
            sleep 10
            
            # 检查模拟器状态
            echo "🔍 检查模拟器状态..."
            adb devices
            
            # 等待设备连接，增加重试次数
            echo "⏳ 等待 ADB 连接..."
            for i in {1..10}; do
              if adb devices | grep -q "emulator.*device"; then
                echo "✅ ADB 已连接 ($i/10)"
                break
              else
                echo "⏳ 等待连接... ($i/10)"
                sleep 5
              fi
              if [ $i -eq 10 ]; then
                echo "❌ ADB 连接超时"
                echo "模拟器状态:"
                adb devices
                echo "尝试重启 ADB..."
                adb kill-server || true
                adb start-server || true
                sleep 3
                adb devices
                exit 1
              fi
            done
            
            # 获取设备名称
            DEVICE=$(adb devices | grep emulator | cut -f1)
            echo "🎯 连接到设备: $DEVICE"
            
            # 等待系统完全启动
            echo "⏳ 等待系统启动..."
            if timeout 180 adb -s $DEVICE wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 2; done'; then
              echo "✅ 系统启动完成"
            else
              echo "❌ 系统启动超时"
              echo "设备属性:"
              adb -s $DEVICE shell getprop | grep boot || true
              exit 1
            fi
            
            # 优化性能设置
            echo "⚡ 优化性能..."
            adb -s $DEVICE shell settings put global window_animation_scale 0 2>/dev/null || true
            adb -s $DEVICE shell settings put global transition_animation_scale 0 2>/dev/null || true
            adb -s $DEVICE shell settings put global animator_duration_scale 0 2>/dev/null || true
            
            # 验证模拟器状态
            ANDROID_VERSION=$(adb -s $DEVICE shell getprop ro.build.version.release 2>/dev/null || echo "Unknown")
            ANDROID_API=$(adb -s $DEVICE shell getprop ro.build.version.sdk 2>/dev/null || echo "Unknown")
            echo "✅ 模拟器就绪 - Android $ANDROID_VERSION (API $ANDROID_API)"

      - name: Cache build outputs
        id: cache-build
        uses: actions/cache@v4
        continue-on-error: true
        with:
          path: |
            app/build/intermediates
            app/build/tmp
            app/build/generated
            build/kotlin
            .gradle/kotlin-dsl
          key: ${{ runner.os }}-build-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/*.kt', '**/*.java') }}
          restore-keys: |
            ${{ runner.os }}-build-
      


      - name: Final Cache Status
        run: |
          echo "📊 最终缓存报告:"
          echo "  Android SDK: ${{ steps.cache-android-sdk.outputs.cache-hit == 'true' && '✅ 已缓存' || '📥 新下载' }}"
          echo "  模拟器AVD: ${{ steps.cache-emulator.outputs.cache-hit == 'true' && '✅ 已缓存' || '📥 新创建' }}"
          echo "  构建产物: ${{ steps.cache-build.outputs.cache-hit == 'true' && '✅ 已缓存' || '📥 首次构建' }}"

      - name: Build and Install APK
        timeout-minutes: 12  # 构建超时控制
        run: |
          echo "🔨 构建 APK..."
          BUILD_START_TIME=$(date +%s)
          
          if ./gradlew assembleFossDebug --configure-on-demand --stacktrace --build-cache; then
            BUILD_END_TIME=$(date +%s)
            BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
            echo "✅ 构建成功 (${BUILD_DURATION}s)"
          else
            echo "❌ 构建失败"
            exit 1
          fi
          
          # 安装 APK
          APK_PATH="app/build/outputs/apk/foss/debug/app-foss-debug.apk"
          if [ -f "$APK_PATH" ]; then
            APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
            echo "📱 安装 APK ($APK_SIZE)..."
            
            if adb install -r -t "$APK_PATH" 2>/dev/null || adb install -r -t "$APK_PATH"; then
              echo "✅ APK 安装成功"
            else
              echo "❌ APK 安装失败"
              exit 1
            fi
          else
            echo "❌ APK 文件不存在"
            exit 1
          fi

      - name: Test and Verify Installation
        timeout-minutes: 5  # 测试验证超时控制
        run: |
          echo "🔍 验证应用..."
          
          # 检查安装
          PACKAGE_NAME="org.fossify.calendar"
          if adb shell pm list packages | grep -q "$PACKAGE_NAME"; then
            echo "✅ 应用已安装"
          else
            echo "❌ 应用未找到"
            exit 1
          fi
          
          # 启动应用
          echo "🚀 启动应用..."
          adb shell am start -n "$PACKAGE_NAME/.activities.MainActivity" 2>/dev/null || \
          adb shell am start -n "$PACKAGE_NAME/.activities.SplashActivity" 2>/dev/null || true
          
          sleep 2
          
          # 截图验证
          if adb shell screencap -p /sdcard/screenshot.png && adb pull /sdcard/screenshot.png ./screenshot.png 2>/dev/null; then
            echo "✅ 截图成功 ($(du -h ./screenshot.png | cut -f1))"
            adb shell rm /sdcard/screenshot.png 2>/dev/null || true
          else
            echo "⚠️ 截图失败"
          fi
          
          echo "✅ 测试完成"

      - name: Upload Test Results and Build Logs
        uses: actions/upload-artifact@v4
        with:
          name: android-test-results-${{ github.run_number }}
          path: |
            screenshot.png
            app_logs.txt
            app/build/outputs/apk/foss/debug/app-foss-debug.apk
            build/reports/**/*
            app/build/reports/**/*
            gradle-build-scan-*.txt
          retention-days: 30

      - name: Test Summary
        if: always()
        run: |
          BRANCH_NAME="${{ github.event.inputs.branch || github.ref_name }}"
          
          echo "## 🧪 Android 模拟器测试" >> $GITHUB_STEP_SUMMARY
          echo "- **分支**: $BRANCH_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- **提交**: ${GITHUB_SHA:0:7}" >> $GITHUB_STEP_SUMMARY
          echo "- **Android API**: ${{ env.API_LEVEL }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 检查结果
          if [ -f "screenshot.png" ]; then
            echo "### ✅ 测试成功" >> $GITHUB_STEP_SUMMARY
            echo "- APK 安装并启动成功" >> $GITHUB_STEP_SUMMARY
            echo "- 截图: $(du -h screenshot.png | cut -f1)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ 测试失败" >> $GITHUB_STEP_SUMMARY
            echo "详见运行日志" >> $GITHUB_STEP_SUMMARY
          fi
